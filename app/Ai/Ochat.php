<?php

namespace App\AI;

use Cloudstudio\Ollama\Facades\Ollama;
use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Facades\Log;
use NumberFormatter;

class Ochat
{
    protected TogetherClient $client;

    public function __construct()
    {
        $this->client = new TogetherClient();
    }

    /**
     * G·ª≠i prompt ƒë·∫øn AI, nh·∫≠n ph·∫£n h·ªìi, cache k·∫øt qu·∫£ v√† x·ª≠ l√Ω JSON.
     */
    public function send(string $message)
    {
        try {
            $cacheKey = 'ai_response_' . md5($message);
            if ($cachedResponse = Cache::get($cacheKey)) {
                Log::info("üì¶ L·∫•y ph·∫£n h·ªìi t·ª´ cache", ['key' => $cacheKey]);
                return $cachedResponse;
            }

            $start = microtime(true);
            $rawResponse = $this->client->chat($message);
            $elapsed = round(microtime(true) - $start, 3);

            Log::info("‚è±Ô∏è Together API ph·∫£n h·ªìi trong {$elapsed}s");
            Log::info("üß† Raw response: " . $rawResponse);

            if (empty($rawResponse)) {
                return ['error' => 'AI kh√¥ng tr·∫£ v·ªÅ n·ªôi dung.'];
            }

            $jsonText = $this->stripExtraText($rawResponse);
            if (!$jsonText) {
                return ['error' => 'Ph·∫£n h·ªìi t·ª´ AI kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng JSON'];
            }

            // ƒê·∫£m b·∫£o k·∫øt th√∫c JSON ƒë√∫ng d·∫•u }
            $jsonText = rtrim($jsonText);
            if (substr($jsonText, -1) !== '}') {
                $jsonText .= '}';
            }

            if (!$this->isJson($jsonText)) {
                Log::warning("‚ö†Ô∏è JSON kh√¥ng h·ª£p l·ªá sau khi x·ª≠ l√Ω", ['text' => $jsonText]);
                return ['error' => 'Ph·∫£n h·ªìi t·ª´ AI kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng JSON'];
            }

            $aiAnswer = json_decode($jsonText, true);

            // B·ªï sung gi√° tr·ªã m·∫∑c ƒë·ªãnh n·∫øu thi·∫øu
            $aiAnswer['type'] ??= 'text';
            $aiAnswer['feedback'] = trim($aiAnswer['feedback'] ?? '') ?: 'C√¢u tr·∫£ l·ªùi ch∆∞a ƒë√∫ng. H√£y th·ª≠ l·∫°i!';
            $aiAnswer['category'] = in_array($aiAnswer['category'] ?? '', ['Ch√≠nh x√°c', 'M·ªôt ph·∫ßn', 'Sai']) ? $aiAnswer['category'] : 'Sai';
            $aiAnswer['percent'] = is_numeric($aiAnswer['percent'] ?? null) ? $aiAnswer['percent'] : 0;

            Cache::put($cacheKey, $aiAnswer, 600); // Cache 10 ph√∫t

            return $aiAnswer;
        } catch (\Exception $e) {
            Log::error("‚ùå L·ªói g·ªçi AI: " . $e->getMessage());
            return ['error' => 'L·ªói: AI kh√¥ng ph·∫£n h·ªìi.'];
        }
    }

    /**
     * So s√°nh c√¢u tr·∫£ l·ªùi c·ªßa ng∆∞·ªùi d√πng v·ªõi ƒë√°p √°n ƒë√∫ng, c√≥ th·ªÉ g·ªçi AI ƒë·ªÉ ch·∫•m ƒëi·ªÉm.
     */
    public function compareAnswer(string $question, string $userAnswer, string $correctAnswer, ?string $lastFeedback = null)
    {
        try {
            // Chu·∫©n ho√° c√°c c√¢u tr·∫£ l·ªùi
            $userAnswer = $this->normalizeAnswer($userAnswer);
            $correctAnswer = $this->normalizeAnswer($correctAnswer);
            $lastFeedback = $lastFeedback ? $this->normalizeAnswer($lastFeedback) : null;

            // Ki·ªÉm tra tr√πng l·∫∑p v·ªõi ph·∫£n h·ªìi tr∆∞·ªõc
            if ($lastFeedback && similar_text($userAnswer, $lastFeedback, $similarityToFeedback) && $similarityToFeedback >= 95) {
                return [
                    "percent" => 75,
                    "category" => "Tr√πng l·∫∑p g·ª£i √Ω",
                    "feedback" => "B·∫°n ƒë√£ sao ch√©p g·∫ßn nh∆∞ nguy√™n vƒÉn g·ª£i √Ω. H√£y th·ª≠ di·ªÖn ƒë·∫°t l·∫°i ho·∫∑c vi·∫øt theo c√°ch hi·ªÉu c·ªßa b·∫°n!",
                    "confidence" => 90,
                    "correct_answer" => $correctAnswer,
                ];
            }

            // Lo·∫°i b·ªè d·∫•u '=' th·ª´a
            $correctAnswer = ltrim($correctAnswer, '=');

            // Chuy·ªÉn t·ª´ ch·ªØ s·ªë th√†nh s·ªë th·ª±c
            $numericUserAnswer = $this->wordsToNumber($userAnswer);
            $numericCorrectAnswer = $this->wordsToNumber($correctAnswer);

            // N·∫øu c·∫£ hai l√† s·ªë v√† b·∫±ng nhau
            if ($numericUserAnswer !== null && $numericCorrectAnswer !== null && $numericUserAnswer == $numericCorrectAnswer) {
                return [
                    "percent" => 100,
                    "category" => "Ch√≠nh x√°c",
                    "feedback" => "C√¢u tr·∫£ l·ªùi ho√†n to√†n ƒë√∫ng!",
                    "confidence" => 100,
                    "correct_answer" => $correctAnswer,
                ];
            }

            // T√≠nh ƒë·ªô t∆∞∆°ng ƒë·ªìng chu·ªói
            similar_text($userAnswer, $correctAnswer, $similarity);

            if ($similarity >= 85) {
                return [
                    "percent" => 100,
                    "category" => "Ch√≠nh x√°c",
                    "feedback" => "C√¢u tr·∫£ l·ªùi ho√†n to√†n ch√≠nh x√°c!",
                    "confidence" => 100,
                    "correct_answer" => $correctAnswer,
                ];
            } elseif ($similarity >= 60) {
                return [
                    "percent" => 75,
                    "category" => "M·ªôt ph·∫ßn",
                    "feedback" => "C√¢u tr·∫£ l·ªùi g·∫ßn ƒë√∫ng, b·∫°n n√™n b·ªï sung th√™m √Ω cho ƒë·∫ßy ƒë·ªß h∆°n.",
                    "confidence" => 85,
                    "correct_answer" => $correctAnswer,
                ];
            }

            // So s√°nh t·ª´ kho√° chung
            $correctWords = array_unique(preg_split('/\P{L}+/u', $correctAnswer, -1, PREG_SPLIT_NO_EMPTY));
            $userWords = array_unique(preg_split('/\P{L}+/u', $userAnswer, -1, PREG_SPLIT_NO_EMPTY));
            $commonWords = array_intersect($correctWords, $userWords);
            $keywordMatchPercentage = count($correctWords) > 0 ? (count($commonWords) / count($correctWords)) * 100 : 0;

            if ($keywordMatchPercentage >= 40 && $similarity < 60) {
                return [
                    "percent" => 50,
                    "category" => "M·ªôt ph·∫ßn",
                    "feedback" => "C√¢u tr·∫£ l·ªùi c·ªßa b·∫°n c√≥ m·ªôt s·ªë √Ω ƒë√∫ng, nh∆∞ng ch∆∞a ƒë·∫ßy ƒë·ªß.",
                    "confidence" => 70,
                    "correct_answer" => $correctAnswer,
                ];
            }

            // G·ª≠i prompt cho AI n·∫øu kh√¥ng kh·ªõp ƒë·ªß
            $prompt = <<<EOT
            B·∫°n l√† h·ªá th·ªëng ƒë√°nh gi√° t·ª± ƒë·ªông. H√£y ch·∫•m ƒëi·ªÉm c√¢u tr·∫£ l·ªùi c·ªßa h·ªçc sinh v√† ch·ªâ tr·∫£ v·ªÅ ƒë√∫ng m·ªôt object JSON h·ª£p l·ªá, kh√¥ng c√≥ m·∫´u, kh√¥ng c√≥ gi·∫£i th√≠ch.

            JSON ph·∫£i c√≥ ƒë·∫ßy ƒë·ªß c√°c tr∆∞·ªùng sau:
            {
            "percent": 0-100,
            "category": "Ch√≠nh x√°c" | "M·ªôt ph·∫ßn" | "Sai",
            "feedback": "M·ªôt c√¢u ng·∫Øn, d∆∞·ªõi 20 t·ª´"
            }

            Ch·ªâ ƒë∆∞·ª£c tr·∫£ v·ªÅ JSON, kh√¥ng c√≥ b·∫•t k·ª≥ gi·∫£i th√≠ch n√†o b√™n ngo√†i. Kh√¥ng ƒë∆∞·ª£c thi·∫øu d·∫•u { ho·∫∑c }.

            Ch·ªâ cho ƒëi·ªÉm 100 n·∫øu h·ªçc sinh tr·∫£ l·ªùi ƒë·∫ßy ƒë·ªß n·ªôi dung trong ƒë√°p √°n. N·∫øu ƒë√∫ng m·ªôt ph·∫ßn, cho 50 ho·∫∑c 75. N·∫øu sai ho√†n to√†n, cho 0.

            C√¢u h·ªèi: "$question"
            H·ªçc sinh tr·∫£ l·ªùi: "$userAnswer"
            ƒê√°p √°n ƒë√∫ng: "$correctAnswer"
            EOT;

            $result = $this->send($prompt);

            if (isset($result['percent'])) {
                $result['correct_answer'] = $correctAnswer;

                // T√≠nh confidence d·ª±a tr√™n c√°c ch·ªâ s·ªë
                $result['confidence'] = round(
                    0.5 * ($similarity ?? 0) +
                        0.3 * ($keywordMatchPercentage ?? 0) +
                        0.2 * ($result['percent'] ?? 0)
                );

                return $result;
            }

            return ['error' => 'Ph·∫£n h·ªìi t·ª´ AI kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng JSON'];
        } catch (\Exception $e) {
            Log::error("‚ùå L·ªói compareAnswer: " . $e->getMessage());
            return ['error' => 'L·ªói: AI kh√¥ng ph·∫£n h·ªìi.'];
        }
    }

    /**
     * Chu·∫©n ho√° c√¢u tr·∫£ l·ªùi: vi·∫øt th∆∞·ªùng, xo√° kho·∫£ng tr·∫Øng th·ª´a, chuy·ªÉn s·ªë n·∫øu c√≥.
     */
    private function normalizeAnswer(string $answer): string
    {
        $answer = trim(mb_strtolower($answer));
        $answer = preg_replace('/\s+/', ' ', $answer);
        return is_numeric($answer) ? (string)(float)$answer : $answer;
    }

    /**
     * Chuy·ªÉn chu·ªói ch·ªØ s·ªë th√†nh s·ªë th·ª±c, h·ªó tr·ª£ nhi·ªÅu locale.
     */
    private function wordsToNumber(string $words): ?float
    {
        $words = str_replace(['b·∫±ng', '='], '', $words);
        $words = trim($words);

        if (is_numeric($words)) {
            return (float) $words;
        }

        $locales = ['vi', 'en'];
        foreach ($locales as $locale) {
            $formatter = new NumberFormatter($locale, NumberFormatter::SPELLOUT);
            $number = $formatter->parse($words);
            if ($number !== false) {
                return $number;
            }
        }

        return null;
    }

    /**
     * Ki·ªÉm tra chu·ªói c√≥ ph·∫£i JSON h·ª£p l·ªá.
     */
    private function isJson(string $string): bool
    {
        json_decode($string);
        return json_last_error() === JSON_ERROR_NONE;
    }

    /**
     * T√°ch ph·∫ßn JSON ra kh·ªèi ƒëo·∫°n text c√≥ th·ªÉ l·∫´n text kh√°c.
     */
    private function stripExtraText(string $text): string
    {
        // Regex ƒë·ªá quy t√¨m JSON h·ª£p l·ªá
        if (preg_match('/\{(?:[^{}]|(?R))*\}/s', $text, $matches)) {
            return $matches[0];
        }

        // N·∫øu kh√¥ng t√¨m th·∫•y, th·ª≠ c·∫Øt t·ª´ d·∫•u { v√† th√™m } n·∫øu thi·∫øu
        $start = strpos($text, '{');
        if ($start !== false) {
            $substr = substr($text, $start);

            $open = substr_count($substr, '{');
            $close = substr_count($substr, '}');

            if ($open > $close) {
                $substr .= str_repeat('}', $open - $close);
            }

            if ($this->isJson($substr)) {
                return $substr;
            }

            Log::warning("‚ö†Ô∏è JSON kh√¥ng h·ª£p l·ªá d√π ƒë√£ th√™m d·∫•u }", ['raw' => $substr]);
        }

        Log::warning("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y JSON trong ph·∫£n h·ªìi AI", ['raw' => $text]);
        return '';
    }
}
