<?php

namespace App\AI;

use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Facades\Log;

class FlashcardSuggest
{
    private function isDuplicateQuestion(string $question, array $existingQuestions): bool
    {
        $normalize = function ($text) {
            return mb_strtolower(
                preg_replace('/\s+/u', ' ', trim($text)),
                'UTF-8'
            );
        };

        $normalizedNew = $normalize($question);

        foreach ($existingQuestions as $old) {
            $normalizedOld = $normalize($old);

            // 1. Exact match sau khi normalize
            if ($normalizedNew === $normalizedOld) {
                return true;
            }

            // 2. Fuzzy match: gi·ªëng nhau > 85%
            // C√≥ th·ªÉ tƒÉng ng∆∞·ª°ng n√†y l√™n 90 n·∫øu mu·ªën ch·ªëng tr√πng l·∫∑p ch·∫∑t ch·∫Ω h∆°n,
            // nh∆∞ng c·∫ßn c√¢n nh·∫Øc tr√°nh lo·∫°i b·ªè c√°c c√¢u h·ªèi h·ª£p l·ªá.
            similar_text($normalizedNew, $normalizedOld, $percent);
            if ($percent >= 85) { // Gi·ªØ nguy√™n 85% l√† m·ªôt kh·ªüi ƒë·∫ßu t·ªët.
                return true;
            }
        }

        return false;
    }

    public function generate(string $subject, int $count = 50, array $excludedQuestions = []): array
    {
        // Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng flashcard t·ªëi ƒëa c√≥ th·ªÉ t·∫°o trong m·ªôt l·∫ßn
        $count = min($count, 50);
        $results = [];
        $remaining = $count;
        $maxLoops = 10; // S·ªë v√≤ng l·∫∑p t·ªëi ƒëa ƒë·ªÉ tr√°nh v√≤ng l·∫∑p v√¥ t·∫≠n
        $loop = 0;
        $requestBatchSize = 10; // S·ªë l∆∞·ª£ng th·∫ª y√™u c·∫ßu AI t·∫°o trong m·ªói l·∫ßn g·ªçi API

        while ($remaining > 0 && $loop < $maxLoops) {
            $loop++;

            // X√°c ƒë·ªãnh s·ªë l∆∞·ª£ng th·∫ª c·∫ßn y√™u c·∫ßu trong l∆∞·ª£t n√†y, kh√¥ng v∆∞·ª£t qu√° $requestBatchSize
            $currentRequestCount = min($remaining, $requestBatchSize);

            $excludedText = '';
            if (!empty($excludedQuestions)) {
                $excludedText = 'D∆∞·ªõi ƒë√¢y l√† c√°c kh√°i ni·ªám ƒë√£ c√≥. **Tuy·ªát ƒë·ªëi kh√¥ng ƒë∆∞·ª£c t·∫°o c√¢u h·ªèi m·ªõi tr√πng l·∫∑p v·ªÅ √Ω nghƒ©a, kh√°i ni·ªám ho·∫∑c thu·∫≠t ng·ªØ v·ªõi b·∫•t k·ª≥ c√¢u h·ªèi n√†o trong danh s√°ch n√†y, k·ªÉ c·∫£ khi di·ªÖn ƒë·∫°t b·∫±ng t·ª´ ng·ªØ kh√°c ho·∫∑c d·ªãch sang ng√¥n ng·ªØ kh√°c:**' . PHP_EOL;
                foreach ($excludedQuestions as $question) {
                    $excludedText .= '- ' . $question . PHP_EOL;
                }
            }

            $prompt = <<<PROMPT
                Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát. Kh√¥ng gi·∫£i th√≠ch g√¨ th√™m.

                B·∫°n l√† tr·ª£ l√Ω h·ªçc t·∫≠p. H√£y t·∫°o **t·ªëi ƒëa** $currentRequestCount th·∫ª flashcard ho√†n to√†n m·ªõi cho m√¥n "$subject".

                Y√™u c·∫ßu:
                - C√¢u h·ªèi v√† c√¢u tr·∫£ l·ªùi t·ª´ c·∫•p 3 tr·ªü l√™n t·ªõi ƒë·∫°i h·ªçc, li√™n quan t·ªõi gi√°o d·ª•c Vi·ªát Nam.
                - Kh√¥ng l·∫∑p l·∫°i √Ω nghƒ©a, t·ª´ ng·ªØ ho·∫∑c kh√°i ni·ªám v·ªõi danh s√°ch ƒë√£ c√≥ (k·ªÉ c·∫£ d·ªãch sang ng√¥n ng·ªØ kh√°c ho·∫∑c di·ªÖn ƒë·∫°t kh√°c).
                - M·ªói th·∫ª g·ªìm:
                    - "question": C√¢u h·ªèi ng·∫Øn ho·∫∑c thu·∫≠t ng·ªØ.
                    - "answer": ƒê·ªãnh nghƒ©a r√µ r√†ng, ng·∫Øn g·ªçn, d·ªÖ hi·ªÉu.
                - N·∫øu kh√¥ng th·ªÉ ƒë·ªß $currentRequestCount, h√£y t·∫°o s·ªë l∆∞·ª£ng nhi·ªÅu nh·∫•t c√≥ th·ªÉ.
                - Tr·∫£ v·ªÅ duy nh·∫•t m·∫£ng JSON.

                V√≠ d·ª•:
                [
                    {"question": "Kh√°i ni·ªám 1", "answer": "ƒê·ªãnh nghƒ©a 1"},
                    {"question": "Kh√°i ni·ªám 2", "answer": "ƒê·ªãnh nghƒ©a 2"}
                ]

                $excludedText
            PROMPT;

            Log::info("‚ö†Ô∏è L·∫•y flashcard m·ªõi (y√™u c·∫ßu $currentRequestCount th·∫ª, v√≤ng $loop)");
            // ∆Ø·ªõc t√≠nh token d·ª±a tr√™n s·ªë l∆∞·ª£ng th·∫ª y√™u c·∫ßu
            $estimatedTokens = min($currentRequestCount * 250, 3500);

            $client = new TogetherClient(); // Gi·∫£ ƒë·ªãnh TogetherClient ƒë√£ ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a
            $raw = $client->chat($prompt, null, $estimatedTokens);

            if (empty($raw)) {
                Log::warning("‚ö†Ô∏è AI kh√¥ng tr·∫£ v·ªÅ n·ªôi dung ·ªü v√≤ng $loop.");
                break;
            }

            $json = $this->extractJsonArray($raw);
            if (!$json || !is_array($json)) {
                Log::error("‚ùå Kh√¥ng tr√≠ch xu·∫•t ƒë∆∞·ª£c JSON h·ª£p l·ªá", ['raw' => $raw]);
                break;
            }

            $newItems = [];
            foreach ($json as $item) {
                if (!isset($item['question'], $item['answer'])) {
                    continue;
                }
                // Ki·ªÉm tra tr√πng l·∫∑p tr∆∞·ªõc khi th√™m v√†o danh s√°ch k·∫øt qu·∫£ v√† danh s√°ch lo·∫°i tr·ª´
                if (!$this->isDuplicateQuestion($item['question'], $excludedQuestions)) {
                    $newItems[] = $item;
                    // Th√™m c√¢u h·ªèi m·ªõi v√†o danh s√°ch lo·∫°i tr·ª´ ƒë·ªÉ tr√°nh tr√πng l·∫∑p trong c√°c v√≤ng ti·∫øp theo
                    $excludedQuestions[] = $item['question'];
                } else {
                    Log::warning("üîÅ B·ªè c√¢u tr√πng ho·∫∑c t∆∞∆°ng t·ª±: " . $item['question']);
                }
            }

            $results = array_merge($results, $newItems);
            $remaining = $count - count($results);

            Log::info("‚úÖ ƒê√£ thu ƒë∆∞·ª£c " . count($results) . " / $count th·∫ª flashcard (v√≤ng $loop).");

            // N·∫øu kh√¥ng c√≥ th·∫ª m·ªõi n√†o ƒë∆∞·ª£c t·∫°o ·ªü v√≤ng n√†y, d·ª´ng ƒë·ªÉ tr√°nh l·∫∑p v√¥ h·∫°n
            if (count($newItems) === 0 && $remaining > 0) {
                Log::warning("‚ö†Ô∏è Kh√¥ng t·∫°o ƒë∆∞·ª£c c√¢u h·ªèi m·ªõi ·ªü v√≤ng $loop, d·ª´ng.");
                break;
            }
        }

        // Tr·∫£ v·ªÅ s·ªë l∆∞·ª£ng th·∫ª flashcard theo y√™u c·∫ßu ban ƒë·∫ßu ($count)
        return array_slice($results, 0, $count);
    }

    public function suggestTopics(string $subject): array
    {
        $prompt = <<<PROMPT
        Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát.

        B·∫°n l√† tr·ª£ l√Ω h·ªçc t·∫≠p. H√£y li·ªát k√™ t·ª´ 8 ƒë·∫øn 15 ch·ªß ƒë·ªÅ h·ªçc t·∫≠p kh√°c nhau cho m√¥n "$subject".

        Y√™u c·∫ßu:
        - C√°c c√¢u h·ªèi v√† c√¢u tr·∫£ l·ªùi t·ª´ c·∫•p 3 tr·ªü l√™n t·ªõi ƒë·∫°i h·ªçc, li√™n quan t·ªõi gi√°o d·ª•c Vi·ªát Nam
        - Bao g·ªìm c·∫£ ch·ªß ƒë·ªÅ c∆° b·∫£n v√† n√¢ng cao.
        - Bao g·ªìm c√°c ch·ªß ƒë·ªÅ li√™n quan ho·∫∑c t√≠ch h·ª£p.
        - Kh√¥ng l·∫∑p l·∫°i.
        - Tr·∫£ v·ªÅ m·∫£ng JSON (kh√¥ng gi·∫£i th√≠ch), v√≠ d·ª•:
        ["Ch·ªß ƒë·ªÅ 1", "Ch·ªß ƒë·ªÅ 2", "Ch·ªß ƒë·ªÅ 3", ...]
        PROMPT;

        $cacheKey = 'together_topics_' . md5($prompt);
        if (Cache::has($cacheKey)) {
            Log::info("üì¶ Ch·ªß ƒë·ªÅ t·ª´ cache", ['key' => $cacheKey]);
            return Cache::get($cacheKey);
        }

        $client = new TogetherClient();
        $raw = $client->chat($prompt);

        if (empty($raw)) {
            return ['error' => 'AI kh√¥ng tr·∫£ v·ªÅ ch·ªß ƒë·ªÅ.'];
        }

        $matches = [];
        if (preg_match('/\[[^\]]+\]/', $raw, $matches)) {
            $json = json_decode($matches[0], true);
            if (is_array($json)) {
                Cache::put($cacheKey, $json, 600);
                return $json;
            }
            Log::error("‚ùå JSON ch·ªß ƒë·ªÅ kh√¥ng h·ª£p l·ªá", ['matched' => $matches[0]]);
            return ['error' => 'Kh√¥ng th·ªÉ ph√¢n t√≠ch k·∫øt qu·∫£ AI.'];
        }

        Log::error("‚ùå Kh√¥ng t√¨m th·∫•y danh s√°ch ch·ªß ƒë·ªÅ h·ª£p l·ªá", ['raw' => $raw]);
        return ['error' => 'Kh√¥ng t√¨m th·∫•y danh s√°ch ch·ªß ƒë·ªÅ h·ª£p l·ªá.'];
    }

    private function extractJsonArray(string $text): ?array
    {
        if (preg_match('/\[\s*{.*?}\s*]/s', $text, $matches)) {
            $json = json_decode($matches[0], true);
            if (json_last_error() === JSON_ERROR_NONE) {
                return $json;
            }
        }

        return null;
    }
}
