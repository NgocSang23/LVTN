<?php

namespace App\AI;

use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Facades\Log;

class FlashcardSuggest
{
    public function generate(string $subject, int $count = 3): array
    {
        $prompt = <<<PROMPT
            Tr·∫£ l·ªùi b·∫±ng ti·∫øng vi·ªát
            g·ª£i √Ω ƒëang d·∫°ng h∆°n k b·ªã tr√πng
            T·∫°o $count th·∫ª flashcard cho m√¥n "$subject".
            M·ªói th·∫ª g·ªìm:
            - "question": m·ªôt thu·∫≠t ng·ªØ ho·∫∑c kh√°i ni·ªám
            - "answer": ƒë·ªãnh nghƒ©a ng·∫Øn
            - "image_url": null

            Tr·∫£ v·ªÅ k·∫øt qu·∫£ d·∫°ng JSON:
            [
            {
                "question": "...",
                "answer": "...",
                "image_url": null
            },
            ...
            ]
        PROMPT;

        $cacheKey = 'together_flashcard_' . md5($prompt);
        if (Cache::has($cacheKey)) {
            Log::info("üì¶ Flashcard t·ª´ cache", ['key' => $cacheKey]);
            return Cache::get($cacheKey);
        }

        $client = new TogetherClient();
        $raw = $client->chat($prompt);

        if (empty($raw)) {
            return ['error' => 'AI kh√¥ng tr·∫£ v·ªÅ n·ªôi dung.'];
        }

        $json = $this->extractJsonArray($raw);
        if (!$json || !is_array($json)) {
            Log::error("‚ùå Kh√¥ng tr√≠ch xu·∫•t ƒë∆∞·ª£c JSON h·ª£p l·ªá", ['raw' => $raw]);
            return ['error' => 'Kh√¥ng tr√≠ch xu·∫•t ƒë∆∞·ª£c JSON h·ª£p l·ªá.'];
        }

        Cache::put($cacheKey, $json, 600);
        return $json;
    }

    public function suggestTopics(string $subject): array
    {
        $prompt = <<<PROMPT
            Tr·∫£ l·ªùi b·∫±ng ti·∫øng vi·ªát
            g·ª£i √Ω ƒëang d·∫°ng h∆°n k b·ªã tr√πng
            Li·ªát k√™ ch·ªß ƒë·ªÅ ph·ªï bi·∫øn c·ªßa m√¥n "$subject".
            Tr·∫£ v·ªÅ m·∫£ng JSON:
            ["Ch·ªß ƒë·ªÅ 1", "Ch·ªß ƒë·ªÅ 2", "Ch·ªß ƒë·ªÅ 3", "Ch·ªß ƒë·ªÅ 4", "Ch·ªß ƒë·ªÅ 5"]
        PROMPT;

        $cacheKey = 'together_topics_' . md5($prompt);
        if (Cache::has($cacheKey)) {
            Log::info("üì¶ Ch·ªß ƒë·ªÅ t·ª´ cache", ['key' => $cacheKey]);
            return Cache::get($cacheKey);
        }

        $client = new TogetherClient();
        $raw = $client->chat($prompt);

        if (empty($raw)) {
            return ['error' => 'AI kh√¥ng tr·∫£ v·ªÅ ch·ªß ƒë·ªÅ.'];
        }

        $matches = [];
        if (preg_match('/\[[^\]]+\]/', $raw, $matches)) {
            $json = json_decode($matches[0], true);
            if (is_array($json)) {
                Cache::put($cacheKey, $json, 600);
                return $json;
            }
            Log::error("‚ùå JSON ch·ªß ƒë·ªÅ kh√¥ng h·ª£p l·ªá", ['matched' => $matches[0]]);
            return ['error' => 'Kh√¥ng th·ªÉ ph√¢n t√≠ch k·∫øt qu·∫£ AI.'];
        }

        Log::error("‚ùå Kh√¥ng t√¨m th·∫•y danh s√°ch ch·ªß ƒë·ªÅ h·ª£p l·ªá", ['raw' => $raw]);
        return ['error' => 'Kh√¥ng t√¨m th·∫•y danh s√°ch ch·ªß ƒë·ªÅ h·ª£p l·ªá.'];
    }

    private function extractJsonArray(string $text): ?array
    {
        if (preg_match('/\[\s*{.*?}\s*]/s', $text, $matches)) {
            $json = json_decode($matches[0], true);
            if (json_last_error() === JSON_ERROR_NONE) {
                return $json;
            }
        }

        return null;
    }
}
