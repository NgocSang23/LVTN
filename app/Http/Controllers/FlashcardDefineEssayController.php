<?php

namespace App\Http\Controllers;

use App\AI\Ochat;
use App\Models\Answer;
use App\Models\AnswerUser;
use App\Models\Card;
use App\Models\ClassRoom;
use App\Models\ClassroomFlashcard;
use App\Models\FlashcardSet;
use App\Models\Image;
use App\Models\Question;
use App\Models\Subject;
use App\Models\Topic;
use GuzzleHttp\Client;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Storage;

use OpenAI;

class FlashcardDefineEssayController extends Controller
{
    public function create()
    {
        $subjects = Subject::all();

        // N·∫øu ng∆∞·ªùi d√πng l√† gi√°o vi√™n th√¨ l·∫•y danh s√°ch l·ªõp h·ªçc
        $myClassrooms = [];
        if (auth()->user()->roles === 'teacher') {
            $myClassrooms = ClassRoom::where('teacher_id', auth()->id())->get();
        }

        return view('user.flashcard_define_essay.create', compact('subjects', 'myClassrooms'));
    }

    public function store(Request $request)
    {
        $data = $request->validate([
            'subject_id' => 'required|exists:subjects,id',
            'topic_title' => 'required|max:255',
            'question_type' => 'required',
            'question_content' => 'required|array',
            'question_content.*' => 'required|string',
            'answer_content' => 'required|array',
            'answer_content.*' => 'required|string',
            'image_name' => 'nullable|array',
            'image_name.*' => 'nullable|image|mimes:jpeg,png,jpg,gif,webp|max:2048',
            'classroom_id' => 'nullable|exists:class_rooms,id',
        ], [
            'subject_id.required' => 'Vui l√≤ng ch·ªçn m√¥n h·ªçc.',
            'subject_id.exists' => 'M√¥n h·ªçc kh√¥ng t·ªìn t·∫°i.',
            'topic_title.required' => 'Vui l√≤ng nh·∫≠p ti√™u ƒë·ªÅ.',
            'topic_title.max' => 'Ti√™u ƒë·ªÅ kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 255 k√Ω t·ª±.',
            'question_type.required' => 'Vui l√≤ng ch·ªçn lo·∫°i c√¢u h·ªèi',
            'question_content.required' => 'Vui l√≤ng nh·∫≠p c√¢u h·ªèi.',
            'question_content.*.required' => 'Vui l√≤ng nh·∫≠p n·ªôi dung cho t·∫•t c·∫£ c√°c c√¢u h·ªèi.',
            'question_content.*.string' => 'N·ªôi dung c√¢u h·ªèi ph·∫£i l√† ki·ªÉu chu·ªói.',
            'answer_content.required' => 'Vui l√≤ng nh·∫≠p c√¢u tr·∫£ l·ªùi.',
            'answer_content.*.required' => 'Vui l√≤ng nh·∫≠p n·ªôi dung cho t·∫•t c·∫£ c√°c c√¢u tr·∫£ l·ªùi.',
            'answer_content.*.string' => 'N·ªôi dung c√¢u tr·∫£ l·ªùi ph·∫£i l√† ki·ªÉu chu·ªói.',
            'image_name.required' => 'Vui l√≤ng t·∫£i l√™n h√¨nh ·∫£nh.',
            'image_name.*.image' => 'File t·∫£i l√™n ph·∫£i l√† h√¨nh ·∫£nh.',
            'image_name.*.mimes' => 'H√¨nh ·∫£nh ph·∫£i c√≥ ƒë·ªãnh d·∫°ng jpeg, png, jpg, gif hoaÃ£ÃÜc webp.',
            'image_name.*.max' => 'K√≠ch th∆∞·ªõc h√¨nh ·∫£nh kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 2048KB.',
            'classroom_id.exists' => 'L·ªõp h·ªçc kh√¥ng t·ªìn t·∫°i.',
        ]);

        // T·∫°o ch·ªß ƒë·ªÅ m·ªõi n·∫øu c·∫ßn
        $topic = new Topic();
        $topic->title = $data['topic_title'];
        $topic->subject_id = $data['subject_id'];
        $topic->save();

        $flashcardSet = new FlashcardSet();
        $flashcardSet->title = $data['topic_title'];
        $flashcardSet->description = 'T·ª± ƒë·ªông t·∫°o t·ª´ form gi√°o vi√™n'; // c√≥ th·ªÉ s·ª≠a theo n·ªôi dung th·∫≠t
        $flashcardSet->user_id = auth()->id();
        $flashcardSet->save();

        // N·∫øu gi√°o vi√™n ch·ªçn l·ªõp h·ªçc, l∆∞u v√†o b·∫£ng classroom_flashcards
        if (!empty($data['classroom_id'])) {
            $exists = ClassroomFlashcard::where('classroom_id', $data['classroom_id'])
                ->where('flashcard_set_id', $flashcardSet->id)
                ->exists();

            if (!$exists) {
                ClassroomFlashcard::create([
                    'classroom_id' => $data['classroom_id'],
                    'flashcard_set_id' => $flashcardSet->id,
                    'user_id' => auth()->id(),
                ]);
            }
        }

        // L∆∞u t·ª´ng c√¢u h·ªèi, c√¢u tr·∫£ l·ªùi, h√¨nh ·∫£nh
        $questionIds = [];

        foreach ($request->question_content as $index => $questionContent) {
            // T·∫°o th·∫ª flashcard
            $card = new Card();
            $card->user_id = auth()->id();
            $card->save();

            // T·∫°o c√¢u h·ªèi
            $question = new Question();
            $question->content = $questionContent;
            $question->level = 1;
            $question->type = $data['question_type'];
            $question->card_id = $card->id;
            $question->topic_id = $topic->id;
            $question->save();

            // ‚úÖ Th√™m d√≤ng n√†y ƒë·ªÉ gom ID l·∫°i
            $questionIds[] = $question->id;

            // L∆∞u c√¢u tr·∫£ l·ªùi
            $answer = new Answer();
            $answer->content = $request->answer_content[$index];
            $answer->question_id = $question->id;
            $answer->save();

            // N·∫øu c√≥ h√¨nh ·∫£nh, l∆∞u v√†o th∆∞ m·ª•c v√† c∆° s·ªü d·ªØ li·ªáu
            if ($request->hasFile("image_name.$index")) {
                $image = $request->file("image_name.$index");
                $imageName = time() . '_' . $image->getClientOriginalName();
                $imagePath = $image->storeAs('images', $imageName, 'public');

                $hinhanh = new Image();
                $hinhanh->name = $imageName;
                $hinhanh->path = $imagePath;
                $hinhanh->question_id = $question->id;
                $hinhanh->save();
            }
        }

        // üî• C·∫≠p nh·∫≠t l·∫°i question_ids cho FlashcardSet
        $flashcardSet->question_ids = implode(',', $questionIds);
        $flashcardSet->save();

        return redirect()->route('user.dashboard')->with('success', 'Th√™m th·∫ª th√†nh c√¥ng!');
    }

    public function storeUserAnswerDefine(Request $request)
    {
        $request->validate([
            'question_id' => 'required|exists:questions,id',
        ]);

        if (!auth()->check()) {
            return response()->json(['message' => 'Ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p'], 401);
        }

        $userId = auth()->user()->id;
        $questionId = $request->question_id;

        // Ki·ªÉm tra n·∫øu ƒë√£ t·ªìn t·∫°i th√¨ kh√¥ng th√™m n·ªØa
        $exist = AnswerUser::where('user_id', $userId)
            ->where('question_id', $questionId)
            ->first();

        if (!$exist) {
            $answerUser = new AnswerUser();
            $answerUser->user_id = $userId;
            $answerUser->question_id = $questionId;
            $answerUser->save();
        }

        return response()->json(['message' => 'ƒê√£ l∆∞u th√†nh c√¥ng']);
    }

    public function storeUserAnswer(Request $request)
    {
        try {
            $data = $request->validate([
                'question_id' => 'exists:questions,id',
                'answeruser_content' => 'required|string',
            ], [
                'question_id.exists' => 'C√¢u h·ªèi kh√¥ng t·ªìn t·∫°i',
                'answeruser_content.required' => 'Xin nh·∫≠p c√¢u tr·∫£ l·ªùi'
            ]);

            $answerUser = new AnswerUser();
            $answerUser->content = $data['answeruser_content'];
            $answerUser->question_id = $data['question_id'];
            $answerUser->user_id = Auth::guard('web')->user()->id;
            $answerUser->save();

            $question = Question::with('answers')->find($data['question_id']);

            if (!$question) {
                return response()->json(['error' => 'C√¢u h·ªèi kh√¥ng h·ª£p l·ªá'], 400);
            }

            $correctAnswer = $question->answers->first()->content ?? 'Kh√¥ng c√≥ ƒë√°p √°n';

            $chatbot = new Ochat();
            $response = $chatbot->compareAnswer($question->content, $data['answeruser_content'], $correctAnswer);

            Log::info("G·ª≠i t·ªõi AI:", [
                'question' => $question->content,
                'user_answer' => $data['answeruser_content'],
                'correct_answer' => $correctAnswer
            ]);

            return response()->json($response);
        } catch (\Exception $e) {
            Log::error("L·ªói x·ª≠ l√Ω c√¢u tr·∫£ l·ªùi: " . $e->getMessage());
            return response()->json(['error' => 'L·ªói m√°y ch·ªß', 'message' => $e->getMessage()], 500);
        }
    }

    public function show(string $encodedIds)
    {
        // Gi·∫£i m√£ danh s√°ch ID
        $decoded = base64_decode($encodedIds);
        $cardIds = explode(',', $decoded);

        // dd($encodedIds, $decoded, $cardIds);

        if (empty($cardIds) || !is_array($cardIds)) {
            abort(404, 'Danh s√°ch th·∫ª kh√¥ng h·ª£p l·ªá.');
        }

        // L·∫•y topic_id c·ªßa card ƒë·∫ßu ti√™n
        $firstCardId = $cardIds[0];

        $topicId = DB::table('questions')
            ->where('card_id', $firstCardId)
            ->value('topic_id');

        if (!$topicId) {
            abort(404, 'Card kh√¥ng t·ªìn t·∫°i ho·∫∑c kh√¥ng c√≥ topic.');
        }

        // L·∫•y t·∫•t c·∫£ c√°c cards c√≥ c√πng topic_id
        $cards = DB::table('cards')
            ->join('questions', 'cards.id', '=', 'questions.card_id')
            ->join('users', 'cards.user_id', '=', 'users.id')
            ->join('topics', 'questions.topic_id', '=', 'topics.id')
            ->select('cards.*', 'questions.*')
            ->where('questions.topic_id', $topicId)
            ->get();

        // C√¢u h·ªèi ƒë·∫ßu ti√™n ƒë·ªÉ hi·ªÉn th·ªã
        $question = Question::where('card_id', $firstCardId)->first();
        if (!$question) {
            abort(404, 'C√¢u h·ªèi kh√¥ng t·ªìn t·∫°i.');
        }

        return view('user.flashcard_define_essay.show', compact('cards', 'question'));
    }

    public function edit(string $id)
    {
        //
    }

    public function update(Request $request, string $id)
    {
        $request->validate([
            'question' => 'required|string|max:255',
            'answer' => 'required|string|max:255',
            'image' => 'nullable|image|mimes:jpeg,png,jpg,gif|max:2048', // Ki·ªÉm tra file ·∫£nh
        ], [
            'question.required' => 'Vui l√≤ng nh·∫≠p n·ªôi dung c√¢u h·ªèi',
            'answer.required' => 'Vui l√≤ng nh·∫≠p n·ªôi dung ƒë√°p √°n',
            'image.image' => 'Vui l√≤ng ch·ªçn file ·∫£nh',
        ]);

        // C·∫≠p nh·∫≠t c√¢u h·ªèi
        $question = Question::find($id);
        if (!$question) {
            return redirect()->back()->with('error', 'C√¢u h·ªèi kh√¥ng t·ªìn t·∫°i!');
        }
        $question->content = $request->question;
        $question->save();

        // C·∫≠p nh·∫≠t ho·∫∑c t·∫°o m·ªõi c√¢u tr·∫£ l·ªùi
        $answer = Answer::where('question_id', $id)->first();
        if ($answer) {
            $answer->content = $request->answer;
            $answer->save();
        } else {
            Answer::create([
                'content' => $request->answer,
                'question_id' => $id,
            ]);
        }

        // C·∫≠p nh·∫≠t ho·∫∑c th√™m h√¨nh ·∫£nh
        if ($request->hasFile('image')) {
            $imageFile = $request->file('image');
            $imageName = time() . '_' . $imageFile->getClientOriginalName();
            $imagePath = $imageFile->storeAs('images', $imageName, 'public');

            $image = Image::where('question_id', $id)->first();
            if ($image) {
                // X√≥a ·∫£nh c≈© n·∫øu c√≥
                if ($image->path) {
                    Storage::disk('public')->delete($image->path);
                }
                $image->path = $imagePath;
                $image->name = $imageName;
                $image->save();
            } else {
                Image::create([
                    'question_id' => $id,
                    'path' => $imagePath,
                    'name' => $imageName
                ]);
            }
        }

        return redirect()->back()->with('success', 'C·∫≠p nh·∫≠t c√¢u h·ªèi th√†nh c√¥ng!');
    }

    public function destroy(string $id)
    {
        $question = Question::find($id);

        if (!$question) {
            return redirect()->back()->with('error', 'Kh√¥ng t√¨m th·∫•y c√¢u h·ªèi!');
        }
        $card_id = $question->card_id;

        $question->images()->delete();
        $question->answers()->delete();

        $answerUser = AnswerUser::where('question_id', $question->id)->first();
        if ($answerUser) {
            $answerUser->delete();
        }

        $question->delete();

        // Ki·ªÉm tra n·∫øu th·∫ª kh√¥ng c√≤n c√¢u h·ªèi n√†o, th√¨ x√≥a lu√¥n th·∫ª
        $remainingQuestions = Question::where('card_id', $card_id)->count();
        if ($remainingQuestions == 0) {
            Card::where('id', $card_id)->delete();
        }

        return redirect()->route('user.dashboard')->with('success', 'X√≥a c√¢u h·ªèi th√†nh c√¥ng!');
    }

    public function destroyAll(string $card_id)
    {
        // T√¨m th·∫ª theo card_id
        $card = Card::find($card_id);
        if (!$card) {
            return redirect()->back()->with('error', 'Kh√¥ng t√¨m th·∫•y th·∫ª!');
        }

        // L·∫•y t·∫•t c·∫£ c√¢u h·ªèi c·ªßa th·∫ª n√†y
        $questions = Question::where('card_id', $card_id)->get();

        foreach ($questions as $question) {
            // X√≥a c√°c ·∫£nh li√™n quan
            $question->images()->delete();

            // X√≥a c√°c c√¢u tr·∫£ l·ªùi
            $question->answers()->delete();

            // X√≥a c√¢u tr·∫£ l·ªùi ng∆∞·ªùi d√πng n·∫øu c√≥
            $answerUser = AnswerUser::where('question_id', $question->id)->first();
            if ($answerUser) {
                $answerUser->delete();
            }

            // X√≥a c√¢u h·ªèi
            $question->delete();
        }

        // Sau khi x√≥a h·∫øt c√¢u h·ªèi, x√≥a th·∫ª
        $card->delete();

        return redirect()->route('user.dashboard')->with('success', 'X√≥a to√†n b·ªô c√¢u h·ªèi v√† th·∫ª th√†nh c√¥ng!');
    }
}
