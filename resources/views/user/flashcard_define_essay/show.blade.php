@extends('user.master')

@section('title', '√în luy·ªán c√°c kh√°i ni·ªám / c√°c c√¢u t·ª± lu·∫≠n')

@section('content')
    <style>
        .preview-container {
            width: 200px;
            height: 100px;
            border: 1px solid #ddd;
            border-radius: 8px;
            overflow: hidden;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        input.form-control:focus {
            outline: none;
            box-shadow: none;
            border-color: none;
        }

        .mark-difficult {
            transition: all 0.3s ease-in-out;
        }

        .mark-difficult:hover {
            transform: scale(1.05);
        }

        .flashcard-wrapper {
            perspective: 1000px;
        }

        .flashcard-wrapper:hover {
            cursor: pointer;
            /* gi·ªØ pointer n·∫øu hover v√πng trung t√¢m */
        }

        .flashcard-inner {
            position: relative;
            width: 100%;
            min-height: 260px;
            transform-style: preserve-3d;
            transition: transform 0.8s;
        }

        .flashcard-inner.flipped {
            transform: rotateY(180deg);
        }

        .flashcard-face {
            position: absolute;
            width: 100%;
            height: 100%;
            backface-visibility: hidden;
            border-radius: 1rem;
            background: white;
        }

        .flashcard-front {
            z-index: 2;
        }

        .flashcard-back {
            transform: rotateY(180deg);
        }

        .play-audio:hover i {
            color: #0d6efd;
        }
    </style>

    <div class="bg-light d-flex align-items-center justify-content-center">
        <div class="container py-4" style="max-width: 900px;">

            {{-- Thanh ti√™u ƒë·ªÅ + n√∫t quay l·∫°i --}}
            <div class="d-flex justify-content-between align-items-center mb-4 px-2"
                style="max-width: 600px; margin: 0 auto;">
                <a href="{{ route('user.dashboard') }}" class="btn btn-outline-primary btn-sm px-3">
                    <i class="fas fa-arrow-left"></i>
                </a>
                <h4 class="topic_title text-center mb-0 flex-grow-1 fw-bold">T√™n ch·ªß ƒë·ªÅ</h4>
            </div>

            {{-- B√†i ki·ªÉm tra n√¢ng cao --}}
            <div class="container mb-4">
                @php
                    $encodedIds = base64_encode(implode(',', $cards->pluck('id')->toArray()));
                @endphp

                <div class="row g-3"> {{-- B·ªé justify-content-center --}}
                    <div class="col-12 col-md-4">
                        <a href="{{ route('game.flashcard', ['ids' => $encodedIds]) }}"
                            class="btn btn-outline-warning w-100 py-2">
                            üÉè Flashcard
                        </a>
                    </div>

                    <div class="col-12 col-md-4">
                        <a href="{{ route('game.match', ['ids' => $encodedIds]) }}"
                            class="btn btn-outline-success w-100 py-2">
                            üß© T√¨m c·∫∑p
                        </a>
                    </div>

                    @if ($cards->count() > 3)
                        <div class="col-12 col-md-4">
                            <a href="{{ route('game.study', ['ids' => $encodedIds]) }}"
                                class="btn btn-outline-primary w-100 py-2">
                                üìö H·ªçc t·∫≠p
                            </a>
                        </div>
                    @endif

                    <div class="col-12 col-md-4">
                        <a href="{{ route('game.fill_blank', ['ids' => $encodedIds]) }}"
                            class="btn btn-outline-danger w-100 py-2">
                            üìù ƒêi·ªÅn ch·ªó tr·ªëng
                        </a>
                    </div>

                    <div class="col-12 col-md-4">
                        <a href="{{ route('game.essay', ['ids' => $encodedIds]) }}" class="btn btn-outline-info w-100 py-2">
                            ‚úèÔ∏è T·ª± lu·∫≠n
                        </a>
                    </div>
                </div>
            </div>

            {{-- Khu v·ª±c Flashcard --}}
            <div class="flashcard-area d-flex flex-column align-items-center mb-4">
                {{-- Flashcard l·∫≠t --}}
                <div class="flashcard-wrapper w-100" style="max-width: 600px; cursor: pointer;">
                    <div class="flashcard-inner" id="flashcardInner">
                        {{-- M·∫∑t tr∆∞·ªõc --}}
                        <div class="flashcard-face flashcard-front card shadow-sm">
                            <div class="card-body d-flex flex-column justify-content-between" style="min-height: 200px;">
                                <div class="d-flex justify-content-end mb-2 gap-2">
                                    <button class="btn btn-light border btn-sm">√în t·∫≠p</button>
                                    <button class="btn btn-outline-secondary play-audio" data-from="question"
                                        title="Nghe c√¢u h·ªèi">
                                        <i class="fas fa-volume-up"></i> Nghe
                                    </button>
                                </div>
                                <div class="flex-grow-1 d-flex align-items-center justify-content-center px-3">
                                    <p class="fw-semibold fs-5 question_content mb-0 text-center text-dark"></p>
                                </div>
                            </div>
                        </div>

                        {{-- M·∫∑t sau --}}
                        <div class="flashcard-face flashcard-back card shadow-sm">
                            <div class="card-body">
                                <div class="d-flex justify-content-end mb-3 gap-2">
                                    <button class="btn btn-light border btn-sm">√în t·∫≠p</button>
                                    <button class="btn btn-outline-secondary play-audio" data-from="question"
                                        title="Nghe c√¢u h·ªèi">
                                        <i class="fas fa-volume-up"></i> Nghe
                                    </button>
                                </div>
                                <div class="row align-items-center gx-3">
                                    <div class="col-8">
                                        <div class="answer-scroll text-center px-2 d-flex justify-content-center align-items-center gap-2"
                                            style="max-height: 180px; overflow-y: auto;">
                                            <p class="fw-semibold fs-5 answer_content mb-0 text-success"></p>
                                        </div>
                                    </div>
                                    <div class="col-4">
                                        <img class="img-fluid rounded shadow-sm image_path d-none"
                                            style="max-width: 100%; height: auto; object-fit: contain;" />
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                {{-- Thanh ƒëi·ªÅu h∆∞·ªõng v√† ƒë√°nh gi√° --}}
                <div class="card shadow-sm w-100 mt-3" style="max-width: 600px;">
                    <div class="card-body d-flex flex-column align-items-center">
                        <div class="d-flex justify-content-around w-100 mb-3">
                            <div class="d-flex align-items-center text-success">
                                <i class="far fa-smile me-1"></i> <span>D·ªÖ</span>
                            </div>
                            <div class="d-flex align-items-center text-warning">
                                <i class="far fa-meh me-1"></i> <span>Trung b√¨nh</span>
                            </div>
                            <div class="d-flex align-items-center text-danger mark-difficult" style="cursor: pointer">
                                <i class="far fa-frown me-1"></i> <span>Kh√≥</span>
                            </div>
                        </div>
                        <div class="d-flex justify-content-center mt-2">
                            <div class="resolve-container"></div>
                        </div>
                        <div class="d-flex align-items-center mt-3">
                            <button class="btn btn-primary prev-question me-3 px-4">&lt;</button>
                            <span class="current-question fw-semibold">1</span>/<span
                                class="total-questions fw-semibold">2</span>
                            <button class="btn btn-primary next-question ms-3 px-4">&gt;</button>
                        </div>
                    </div>

                    @if (collect($cards)->contains(fn($card) => Auth::user()->id == $card->user_id))
                        <div class="d-flex justify-content-end mb-3 me-3">
                            <button class="btn btn-warning me-2 edit-question" data-bs-toggle="modal"
                                data-bs-target="#editQuestionModal">
                                <i class="fas fa-edit"></i> S·ª≠a
                            </button>
                            <button class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#deleteConfirmModal">
                                <i class="fas fa-trash-alt"></i> X√≥a
                            </button>
                        </div>
                    @endif
                </div>
            </div>

            <hr>

            {{-- Danh s√°ch ƒë·ªãnh nghƒ©a d·∫°ng b·∫£ng --}}
            <div class="definition-list mt-4 mx-auto w-100">
                <div class="card shadow-sm rounded">
                    <div class="card-body p-0">
                        <table class="table table-bordered table-striped table-hover mb-0">
                            <thead class="table-light">
                                <tr>
                                    <th style="width: 35%">C√¢u h·ªèi</th>
                                    <th style="width: 50%">ƒê√°p √°n</th>
                                </tr>
                            </thead>
                            <tbody class="definition-table-body">
                                {{-- D·ªØ li·ªáu s·∫Ω ƒë∆∞·ª£c JS render v√†o ƒë√¢y --}}
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

        </div>
    </div>


    {{-- Modal ch·ªânh s·ª≠a --}}
    <div class="modal fade" id="editQuestionModal" tabindex="-1" aria-labelledby="editQuestionModalLabel"
        aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content" style="border-radius: 12px; box-shadow: 0 5px 15px rgba(0,0,0,0.2); border: none;">
                <div class="modal-header"
                    style="background: linear-gradient(135deg, #00c6ff, #0072ff); color: white; border-top-left-radius: 12px; border-top-right-radius: 12px;">
                    <h5 class="modal-title" id="editQuestionModalLabel" style="font-weight: 600;">‚úèÔ∏è Ch·ªânh s·ª≠a c√¢u h·ªèi
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"
                        style="filter: brightness(0) invert(1); opacity: 0.8;"></button>
                </div>
                <div class="modal-body" style="font-size: 1rem; color: #333;">
                    <form id="editQuestionForm" method="POST" action="{{ route('flashcard_define_essay.update', 0) }}"
                        enctype="multipart/form-data">
                        @csrf
                        @method('PUT')
                        <div class="mb-3">
                            <label for="editQuestionContent" class="form-label">C√¢u h·ªèi</label>
                            <textarea name="question" class="form-control auto-resize" id="editQuestionContent" rows="5"
                                placeholder="Nh·∫≠p c√¢u h·ªèi t·∫°i ƒë√¢y..."
                                style="resize: vertical; max-height: 300px; min-height: 100px; overflow-y: auto;"></textarea>
                            @error('question')
                                <small class="text-danger">{{ $message }}</small>
                            @enderror
                        </div>
                        <div class="mb-3">
                            <label for="editAnswerContent" class="form-label">ƒê√°p √°n</label>
                            <textarea name="answer" class="form-control auto-resize" id="editAnswerContent" rows="5"
                                placeholder="Nh·∫≠p ƒë√°p √°n t·∫°i ƒë√¢y..."
                                style="resize: vertical; max-height: 300px; min-height: 100px; overflow-y: auto;"></textarea>
                            @error('answer')
                                <small class="text-danger">{{ $message }}</small>
                            @enderror
                        </div>
                        <div class="mb-3 d-none">
                            <label for="editImagePath" class="form-label">ƒê∆∞·ªùng d·∫´n ·∫£nh</label>
                            <input type="text" class="form-control" id="editImagePath" name="image_path" readonly>
                            @error('image_path')
                                <small class="text-danger">{{ $message }}</small>
                            @enderror
                        </div>
                        <div class="row mb-3 align-items-center">
                            <div class="col-md-6">
                                <input type="file" name="image" id="editImageInput"
                                    class="form-control image-input" accept="image/*">
                            </div>
                            <div class="col-md-3">
                                <div class="preview-container text-center">
                                    <img src="" width="180" height="80" id="editImagePreview"
                                        alt="Xem tr∆∞·ªõc ·∫£nh" class="image-preview d-none" style="border-radius: 6px;">
                                </div>
                            </div>
                        </div>
                        <div class="text-end">
                            <button type="submit" class="btn btn-primary"
                                style="padding: 6px 20px; border-radius: 6px;">L∆∞u thay ƒë·ªïi</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    {{-- Modal x√≥a --}}
    <div class="modal fade" id="deleteConfirmModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content" style="border-radius: 12px; box-shadow: 0 5px 15px rgba(0,0,0,0.2); border: none;">
                <div class="modal-header"
                    style="background: linear-gradient(135deg, #ff5f6d, #ffc371); color: white; border-top-left-radius: 12px; border-top-right-radius: 12px;">
                    <h5 class="modal-title" style="font-weight: 600;">‚ö†Ô∏è X√°c nh·∫≠n x√≥a</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"
                        style="filter: brightness(0) invert(1); opacity: 0.8;"></button>
                </div>
                <div class="modal-body" style="font-size: 1rem; color: #333;">
                    <p>B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a c√¢u h·ªèi n√†y kh√¥ng?</p>
                </div>
                <div class="modal-footer d-flex justify-content-between">
                    <form id="deleteForm" method="POST" action="{{ route('flashcard_define_essay.destroy', 0) }}">
                        @csrf
                        @method('DELETE')
                        <button type="submit" class="btn btn-danger"
                            style="padding: 6px 20px; border-radius: 6px;">X√≥a</button>
                    </form>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal"
                        style="padding: 6px 20px; border-radius: 6px;">H·ªßy</button>
                </div>
            </div>
        </div>
    </div>

    {{-- <script src="{{ asset('assets/js/define-essay.js') }}"></script> --}}

    <script>
        // document.addEventListener("DOMContentLoaded", function() { ... });
        // D√≤ng n√†y ƒë·∫£m b·∫£o r·∫±ng to√†n b·ªô m√£ JavaScript b√™n trong s·∫Ω ch·ªâ ch·∫°y khi t·∫•t c·∫£ c√°c ph·∫ßn t·ª≠ HTML tr√™n trang ƒë√£ ƒë∆∞·ª£c t·∫£i v√† ph√¢n t√≠ch c√∫ ph√°p ho√†n t·∫•t.
        // ƒêi·ªÅu n√†y ngƒÉn ch·∫∑n l·ªói khi c·ªë g·∫Øng truy c·∫≠p c√°c ph·∫ßn t·ª≠ HTML ch∆∞a t·ªìn t·∫°i.
        document.addEventListener("DOMContentLoaded", function() {

            // let currentIndex = 0;
            // Bi·∫øn n√†y d√πng ƒë·ªÉ l∆∞u tr·ªØ ch·ªâ s·ªë c·ªßa c√¢u h·ªèi hi·ªán t·∫°i ƒëang ƒë∆∞·ª£c hi·ªÉn th·ªã tr√™n giao di·ªán.
            // B·∫Øt ƒë·∫ßu t·ª´ 0, nghƒ©a l√† c√¢u h·ªèi ƒë·∫ßu ti√™n trong m·∫£ng.
            let currentIndex = 0;

            // let questions = [];
            // M·∫£ng n√†y s·∫Ω l∆∞u tr·ªØ to√†n b·ªô danh s√°ch c√°c c√¢u h·ªèi ƒë∆∞·ª£c l·∫•y v·ªÅ t·ª´ API.
            let questions = [];

            // const cardId = window.location.pathname.split("/").pop();
            // D√≤ng n√†y d√πng ƒë·ªÉ l·∫•y ID c·ªßa "th·∫ª" (card) t·ª´ URL hi·ªán t·∫°i.
            // V√≠ d·ª•: n·∫øu URL l√† "http://localhost:8000/flashcard/123", th√¨ cardId s·∫Ω l√† "123".
            // - window.location.pathname: L·∫•y ph·∫ßn ƒë∆∞·ªùng d·∫´n c·ªßa URL (v√≠ d·ª•: "/flashcard/123").
            // - .split("/"): Chia chu·ªói ƒë∆∞·ªùng d·∫´n th√†nh m·ªôt m·∫£ng c√°c chu·ªói con d·ª±a tr√™n k√Ω t·ª± "/".
            //   V√≠ d·ª•: ["", "flashcard", "123"].
            // - .pop(): L·∫•y ph·∫ßn t·ª≠ cu·ªëi c√πng c·ªßa m·∫£ng, t·ª©c l√† ID th·∫ª.
            const cardId = window.location.pathname.split("/").pop();

            // H√†m fetch c√¢u h·ªèi t·ª´ API
            // H√†m n√†y c√≥ nhi·ªám v·ª• g·ªçi API ƒë·ªÉ l·∫•y danh s√°ch c√°c c√¢u h·ªèi li√™n quan ƒë·∫øn cardId.
            function fetchQuestions() {
                // fetch(): L√† m·ªôt API t√≠ch h·ª£p s·∫µn trong tr√¨nh duy·ªát ƒë·ªÉ g·ª≠i c√°c y√™u c·∫ßu m·∫°ng (HTTP requests).
                // `http://localhost:8000/api/card_define_essay/${cardId}`: ƒê√¢y l√† URL c·ªßa API s·∫Ω ƒë∆∞·ª£c g·ªçi.
                // ${cardId} l√† m·ªôt template literal, cho ph√©p nh√∫ng gi√° tr·ªã c·ªßa bi·∫øn cardId v√†o chu·ªói URL.
                fetch(`http://localhost:8000/api/card_define_essay/${cardId}`)
                    // .then(response => response.json()):
                    // Khi nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ API, .then() ƒë·∫ßu ti√™n s·∫Ω ƒë∆∞·ª£c th·ª±c thi.
                    // response.json() s·∫Ω ph√¢n t√≠ch c√∫ ph√°p ph·∫£n h·ªìi d∆∞·ªõi d·∫°ng JSON v√† tr·∫£ v·ªÅ m·ªôt Promise kh√°c.
                    .then(response => response.json())
                    // .then(data => { ... }):
                    // Khi d·ªØ li·ªáu JSON ƒë√£ ƒë∆∞·ª£c ph√¢n t√≠ch c√∫ ph√°p th√†nh c√¥ng, .then() th·ª© hai s·∫Ω nh·∫≠n ƒë∆∞·ª£c ƒë·ªëi t∆∞·ª£ng data.
                    .then(data => {
                        // Ki·ªÉm tra n·∫øu API tr·∫£ v·ªÅ d·ªØ li·ªáu th√†nh c√¥ng (status_code l√† 200) v√† c√≥ √≠t nh·∫•t m·ªôt c√¢u h·ªèi.
                        if (data.status_code === 200 && data.data.length > 0) {
                            // questions = data.data.filter(item => item.question.type === "definition");
                            // L·ªçc ra c√°c c√¢u h·ªèi c√≥ thu·ªôc t√≠nh 'type' l√† "definition".
                            // ƒêi·ªÅu n√†y ƒë·∫£m b·∫£o r·∫±ng ch·ªâ c√°c c√¢u h·ªèi ƒë·ªãnh nghƒ©a ƒë∆∞·ª£c hi·ªÉn th·ªã.
                            questions = data.data.filter(item => item.question.type === "definition");
                            currentIndex = 0; // Reset ch·ªâ s·ªë c√¢u h·ªèi v·ªÅ c√¢u ƒë·∫ßu ti√™n sau khi t·∫£i d·ªØ li·ªáu m·ªõi.
                            updateQuestion(); // G·ªçi h√†m ƒë·ªÉ c·∫≠p nh·∫≠t giao di·ªán hi·ªÉn th·ªã c√¢u h·ªèi ƒë·∫ßu ti√™n.
                        } else {
                            // N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu ho·∫∑c API tr·∫£ v·ªÅ l·ªói
                            document.querySelector(".question_content").innerText = "Kh√¥ng c√≥ d·ªØ li·ªáu!";
                            document.querySelector(".answer_content").innerText =
                                ""; // X√≥a n·ªôi dung c√¢u tr·∫£ l·ªùi.
                        }
                    })
                    // .catch(error => { ... }):
                    // B·∫Øt b·∫•t k·ª≥ l·ªói n√†o x·∫£y ra trong qu√° tr√¨nh fetch API (v√≠ d·ª•: m·∫•t m·∫°ng, server kh√¥ng ph·∫£n h·ªìi).
                    .catch(error => {
                        console.error("L·ªói API:", error); // Ghi l·ªói ra console ƒë·ªÉ debug.
                        alert("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu, vui l√≤ng th·ª≠ l·∫°i sau."); // Th√¥ng b√°o cho ng∆∞·ªùi d√πng.
                    });
            }

            // H√†m l∆∞u c√¢u tr·∫£ l·ªùi c·ªßa ng∆∞·ªùi d√πng khi l·∫≠t th·∫ª
            // H√†m n√†y g·ª≠i m·ªôt y√™u c·∫ßu POST ƒë·∫øn server ƒë·ªÉ ghi nh·∫≠n vi·ªác ng∆∞·ªùi d√πng ƒë√£ xem m·ªôt c√¢u h·ªèi.
            function saveAnswer() {
                // Ki·ªÉm tra n·∫øu m·∫£ng c√¢u h·ªèi r·ªóng ho·∫∑c kh√¥ng t·ªìn t·∫°i th√¨ tho√°t kh·ªèi h√†m.
                if (!questions || questions.length === 0) return;

                // L·∫•y ƒë·ªëi t∆∞·ª£ng c√¢u h·ªèi hi·ªán t·∫°i t·ª´ m·∫£ng 'questions' d·ª±a tr√™n 'currentIndex'.
                let question = questions[currentIndex].question;

                // fetch("{{ route('flashcard_define_essay.save') }}", { ... });
                // G·ª≠i y√™u c·∫ßu POST ƒë·∫øn endpoint l∆∞u tr·∫°ng th√°i flashcard.
                // {{ route('flashcard_define_essay.save') }} l√† m·ªôt c√∫ ph√°p c·ªßa Blade (framework PHP Laravel)
                // ƒë·ªÉ t·∫°o ra URL cho m·ªôt route ƒë√£ ƒë·ªãnh nghƒ©a.
                fetch("{{ route('flashcard_define_essay.save') }}", {
                        method: "POST", // Ph∆∞∆°ng th·ª©c HTTP l√† POST.
                        headers: {
                            // "X-CSRF-TOKEN": "{{ csrf_token() }}":
                            // ƒê√¢y l√† m·ªôt token b·∫£o m·∫≠t (Cross-Site Request Forgery) c·∫ßn thi·∫øt cho c√°c y√™u c·∫ßu POST trong Laravel.
                            // {{ csrf_token() }} c≈©ng l√† c√∫ ph√°p Blade ƒë·ªÉ l·∫•y token CSRF.
                            "X-CSRF-TOKEN": "{{ csrf_token() }}",
                            "Content-Type": "application/json" // Ch·ªâ ƒë·ªãnh ki·ªÉu n·ªôi dung c·ªßa y√™u c·∫ßu l√† JSON.
                        },
                        body: JSON.stringify({ // Chuy·ªÉn ƒë·ªïi ƒë·ªëi t∆∞·ª£ng JavaScript th√†nh chu·ªói JSON ƒë·ªÉ g·ª≠i ƒëi.
                            question_id: question.id // G·ª≠i ID c·ªßa c√¢u h·ªèi hi·ªán t·∫°i l√™n server.
                        })
                    })
                    // .then(async response => { ... });
                    // Khi nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ server.
                    .then(async response => {
                        if (!response.ok) { // N·∫øu ph·∫£n h·ªìi kh√¥ng th√†nh c√¥ng (v√≠ d·ª•: status 4xx ho·∫∑c 5xx).
                            const text = await response.text(); // ƒê·ªçc n·ªôi dung ph·∫£n h·ªìi d∆∞·ªõi d·∫°ng vƒÉn b·∫£n.
                            throw new Error(
                                `L·ªói Server: ${response.status}, ${text}`
                            ); // N√©m l·ªói v·ªõi th√¥ng tin chi ti·∫øt.
                        }
                        return response.json(); // Tr·∫£ v·ªÅ d·ªØ li·ªáu JSON n·∫øu th√†nh c√¥ng.
                    })
                    .then(data => {
                        console.log("ƒê√£ l∆∞u c√¢u tr·∫£ l·ªùi", data); // Ghi th√¥ng b√°o th√†nh c√¥ng ra console.
                    })
                    .catch(error => {
                        console.error("L·ªói khi l∆∞u c√¢u tr·∫£ l·ªùi:", error); // B·∫Øt v√† ghi l·ªói n·∫øu c√≥.
                    });
            }

            // H√†m c·∫≠p nh·∫≠t giao di·ªán c√¢u h·ªèi khi next/prev ho·∫∑c load d·ªØ li·ªáu
            // H√†m n√†y ch·ªãu tr√°ch nhi·ªám hi·ªÉn th·ªã c√¢u h·ªèi v√† c√¢u tr·∫£ l·ªùi hi·ªán t·∫°i l√™n giao di·ªán ng∆∞·ªùi d√πng,
            // c≈©ng nh∆∞ c·∫≠p nh·∫≠t tr·∫°ng th√°i c·ªßa c√°c n√∫t "Kh√≥" v√† "T√¥i ƒë√£ hi·ªÉu".
            function updateQuestion() {
                // N·∫øu kh√¥ng c√≥ c√¢u h·ªèi n√†o, tho√°t kh·ªèi h√†m.
                if (questions.length === 0) return;

                // L·∫•y d·ªØ li·ªáu c·ªßa c√¢u h·ªèi hi·ªán t·∫°i t·ª´ m·∫£ng 'questions'.
                let cardData = questions[currentIndex];
                let question = cardData.question; // L·∫•y ƒë·ªëi t∆∞·ª£ng c√¢u h·ªèi.
                let topic = question.topic; // L·∫•y th√¥ng tin ch·ªß ƒë·ªÅ.
                // L·∫•y n·ªôi dung c√¢u tr·∫£ l·ªùi. N·∫øu kh√¥ng c√≥ ƒë√°p √°n, hi·ªÉn th·ªã "Ch∆∞a c√≥ ƒë√°p √°n".
                let answer = (question.answers && question.answers.length > 0) ? question.answers[0].content :
                    "Ch∆∞a c√≥ ƒë√°p √°n";
                // L·∫•y ƒë∆∞·ªùng d·∫´n ·∫£nh. N·∫øu kh√¥ng c√≥ ·∫£nh, ƒë·∫∑t l√† null.
                let image = (question.images && question.images.length > 0) ? question.images[0].path :
                    null;

                // Chu·ªói HTML ƒë·ªÉ x√¢y d·ª±ng danh s√°ch c√¢u h·ªèi trong b·∫£ng
                let listQuestion = "";

                // Duy·ªát qua t·∫•t c·∫£ c√°c c√¢u h·ªèi ƒë·ªÉ t·∫°o h√†ng cho b·∫£ng hi·ªÉn th·ªã danh s√°ch ƒë·ªãnh nghƒ©a.
                questions.forEach((cardData) => {
                    let question = cardData.question;
                    let answer = (question.answers && question.answers.length > 0) ?
                        question.answers[0].content :
                        "Ch∆∞a c√≥ ƒë√°p √°n";

                    listQuestion += `
                        <tr>
                            <td class="align-middle">
                                <div class="d-flex justify-content-between align-items-center">
                                    <span class="fw-semibold text-dark">${question.content}</span>
                                    <button class="btn btn-sm btn-light border play-audio ms-2" data-text="${question.content}" title="Nghe c√¢u h·ªèi">
                                        <i class="fas fa-volume-up text-secondary"></i>
                                    </button>
                                </div>
                            </td>
                            <td class="align-middle">
                                <div class="d-flex justify-content-between align-items-center">
                                    <span class="text-dark">${answer}</span>
                                    <button class="btn btn-sm btn-light border play-audio ms-2" data-text="${answer}" title="Nghe ƒë√°p √°n">
                                        <i class="fas fa-volume-up text-secondary"></i>
                                    </button>
                                </div>
                            </td>
                        </tr>
                    `;
                });

                // ƒê·ªï d·ªØ li·ªáu v√†o ph·∫ßn th√¢n b·∫£ng
                document.querySelector(".definition-table-body").innerHTML = listQuestion;

                // C·∫≠p nh·∫≠t ti√™u ƒë·ªÅ ch·ªß ƒë·ªÅ.
                document.querySelector(".topic_title").innerText = 'Ch·ªß ƒë·ªÅ: ' + topic.title;

                // C·∫≠p nh·∫≠t n·ªôi dung c√¢u h·ªèi, gi·ªõi h·∫°n chi·ªÅu cao v√† th√™m cu·ªôn n·∫øu c·∫ßn.
                document.querySelector(".question_content").innerHTML =
                    `<div style="max-height: 150px; overflow-y: auto;">${question.content}</div>`;
                // C·∫≠p nh·∫≠t n·ªôi dung c√¢u tr·∫£ l·ªùi.
                document.querySelector(".answer_content").innerHTML = answer;

                const markBtn = document.querySelector(".mark-difficult"); // N√∫t "Kh√≥"
                const resolveContainer = document.querySelector(
                    ".resolve-container"); // N∆°i hi·ªán n√∫t "T√¥i ƒë√£ hi·ªÉu"

                // G√°n ID c√¢u h·ªèi v√†o thu·ªôc t√≠nh data-question-id c·ªßa n√∫t "Kh√≥".
                markBtn.dataset.questionId = question.id;

                // Reset giao di·ªán m·∫∑c ƒë·ªãnh c·ªßa n√∫t "Kh√≥"
                markBtn.innerHTML = `<i class="far fa-frown me-1"></i> Kh√≥`; // N·ªôi dung n√∫t.
                // X√≥a c√°c class CSS ƒë√£ th√™m tr∆∞·ªõc ƒë√≥ (n·∫øu c√≥).
                markBtn.classList.remove("btn-success", "fw-bold", "text-success");
                markBtn.classList.add("text-danger"); // Th√™m class m√†u ƒë·ªè.
                markBtn.style.pointerEvents = "auto"; // Cho ph√©p click l·∫°i.
                resolveContainer.innerHTML = ""; // X√≥a n·ªôi dung c·ªßa v√πng ch·ª©a n√∫t "T√¥i ƒë√£ hi·ªÉu".

                // G·ªçi API ki·ªÉm tra tr·∫°ng th√°i c·ªßa c√¢u h·ªèi (ƒë√£ ƒë√°nh d·∫•u kh√≥ ch∆∞a, ƒë√£ gi·∫£i quy·∫øt ch∆∞a).
                fetch(`/user/api/flashcard/check-difficult/${question.id}`)
                    .then(res => res.json())
                    .then(data => {
                        // N·∫øu c√¢u h·ªèi ƒë√£ ƒë∆∞·ª£c ƒë√°nh d·∫•u l√† "Kh√≥" (is_difficult l√† true)
                        if (data.is_difficult) {
                            // N·∫øu ƒë√£ ƒë√°nh d·∫•u "Kh√≥" nh∆∞ng ch∆∞a "T√¥i ƒë√£ hi·ªÉu"
                            if (!data.is_resolved) {
                                // C·∫≠p nh·∫≠t n·ªôi dung v√† tr·∫°ng th√°i c·ªßa n√∫t "Kh√≥".
                                markBtn.innerHTML =
                                    `<i class="fas fa-check-circle me-1"></i> <span>ƒê√£ ƒë√°nh d·∫•u</span>`;
                                markBtn.style.pointerEvents =
                                    "none"; // V√¥ hi·ªáu h√≥a n√∫t "Kh√≥" ƒë·ªÉ kh√¥ng ƒë√°nh d·∫•u l·∫°i.

                                // Hi·ªán n√∫t "T√¥i ƒë√£ hi·ªÉu"
                                resolveContainer.innerHTML = `
                                    <button class="btn btn-warning mark-resolved mt-2 mb-2" data-question-id="${question.id}" style="min-width: 140px;">
                                        <i class="fas fa-check"></i> T√¥i ƒë√£ hi·ªÉu
                                    </button>
                                `;

                                // B·∫Øt s·ª± ki·ªán click v√†o "T√¥i ƒë√£ hi·ªÉu"
                                // Khi n√∫t "T√¥i ƒë√£ hi·ªÉu" ƒë∆∞·ª£c click, g·ª≠i y√™u c·∫ßu POST ƒë·ªÉ ƒë√°nh d·∫•u c√¢u h·ªèi l√† ƒë√£ gi·∫£i quy·∫øt.
                                document.querySelector(".mark-resolved").addEventListener("click",
                                    function() {
                                        const qid = this.dataset.questionId; // L·∫•y ID c√¢u h·ªèi t·ª´ n√∫t.

                                        fetch("/user/flashcard/resolved", {
                                                method: "POST",
                                                headers: {
                                                    "Content-Type": "application/json",
                                                    "X-CSRF-TOKEN": document.querySelector(
                                                            'meta[name="csrf-token"]')
                                                        .content // L·∫•y CSRF token t·ª´ th·∫ª meta.
                                                },
                                                body: JSON.stringify({
                                                    question_id: qid
                                                })
                                            })
                                            .then(res => res.json())
                                            .then(result => {
                                                if (result.status === "resolved") {
                                                    // N·∫øu server tr·∫£ v·ªÅ tr·∫°ng th√°i "resolved", reset l·∫°i giao di·ªán c·ªßa n√∫t "Kh√≥".
                                                    markBtn.innerHTML =
                                                        `<i class="far fa-frown me-1"></i> Kh√≥`;
                                                    markBtn.classList.remove("text-success");
                                                    markBtn.classList.add("text-danger");
                                                    markBtn.style.pointerEvents =
                                                        "auto"; // K√≠ch ho·∫°t l·∫°i n√∫t "Kh√≥".
                                                    resolveContainer.innerHTML =
                                                        ""; // ·∫®n n√∫t "T√¥i ƒë√£ hi·ªÉu".
                                                }
                                            });
                                    });

                            } else {
                                // üî∏ ƒê√£ ƒë√°nh d·∫•u "Kh√≥" v√† ƒë√£ "T√¥i ƒë√£ hi·ªÉu"
                                // Trong tr∆∞·ªùng h·ª£p n√†y, n√∫t "Kh√≥" s·∫Ω ƒë∆∞·ª£c hi·ªÉn th·ªã nh∆∞ b√¨nh th∆∞·ªùng
                                // v√† c√≥ th·ªÉ click ƒë·ªÉ ƒë√°nh d·∫•u l·∫°i.
                                markBtn.innerHTML = `<i class="far fa-frown me-1"></i> Kh√≥`;
                                markBtn.classList.remove("text-success");
                                markBtn.classList.add("text-danger");
                                markBtn.style.pointerEvents = "auto";

                                // Cho ph√©p ƒë√°nh d·∫•u l·∫°i (g·∫Øn l·∫°i s·ª± ki·ªán click)
                                markBtn.addEventListener("click", function() {
                                    const qid = this.dataset.questionId;

                                    fetch("/user/flashcard/mark-difficult", {
                                            method: "POST",
                                            headers: {
                                                "Content-Type": "application/json",
                                                "X-CSRF-TOKEN": document.querySelector(
                                                    'meta[name="csrf-token"]').content
                                            },
                                            body: JSON.stringify({
                                                question_id: qid
                                            })
                                        })
                                        .then(res => res.json())
                                        .then(result => {
                                            if (result.status === "marked") {
                                                // N·∫øu server tr·∫£ v·ªÅ tr·∫°ng th√°i "marked", c·∫≠p nh·∫≠t giao di·ªán.
                                                markBtn.innerHTML =
                                                    `<i class="fas fa-check-circle me-1"></i> ƒê√£ ƒë√°nh d·∫•u`;
                                                markBtn.style.pointerEvents = "none";

                                                // Hi·ªán n√∫t "T√¥i ƒë√£ hi·ªÉu" sau khi ƒë√°nh d·∫•u kh√≥.
                                                resolveContainer.innerHTML = `
                                                    <button class="btn btn-warning mark-resolved mt-2 mb-2" data-question-id="${qid}" style="min-width: 140px;">
                                                        <i class="fas fa-check"></i> T√¥i ƒë√£ hi·ªÉu
                                                    </button>
                                                `;

                                                // G·∫Øn s·ª± ki·ªán cho n√∫t "T√¥i ƒë√£ hi·ªÉu" m·ªõi t·∫°o.
                                                document.querySelector(".mark-resolved")
                                                    .addEventListener("click", function() {
                                                        fetch("/user/flashcard/resolved", {
                                                                method: "POST",
                                                                headers: {
                                                                    "Content-Type": "application/json",
                                                                    "X-CSRF-TOKEN": document
                                                                        .querySelector(
                                                                            'meta[name="csrf-token"]'
                                                                        ).content
                                                                },
                                                                body: JSON.stringify({
                                                                    question_id: qid
                                                                })
                                                            })
                                                            .then(res => res.json())
                                                            .then(result => {
                                                                if (result.status ===
                                                                    "resolved") {
                                                                    // Reset l·∫°i giao di·ªán n√∫t "Kh√≥" sau khi ƒë√£ "T√¥i ƒë√£ hi·ªÉu".
                                                                    markBtn.innerHTML =
                                                                        `<i class="far fa-frown me-1"></i> Kh√≥`;
                                                                    markBtn.classList
                                                                        .remove(
                                                                            "text-success"
                                                                        );
                                                                    markBtn.classList
                                                                        .add(
                                                                            "text-danger"
                                                                        );
                                                                    markBtn.style
                                                                        .pointerEvents =
                                                                        "auto";
                                                                    resolveContainer
                                                                        .innerHTML = "";
                                                                }
                                                            });
                                                    });
                                            }
                                        });
                                }, {
                                    once: true // ƒê·∫£m b·∫£o s·ª± ki·ªán ch·ªâ ƒë∆∞·ª£c g·∫Øn m·ªôt l·∫ßn ƒë·ªÉ tr√°nh l·ªói.
                                });
                            }
                        } else {
                            // ‚ùå Ch∆∞a t·ª´ng ƒë√°nh d·∫•u "Kh√≥"
                            // Reset l·∫°i tr·∫°ng th√°i c·ªßa n√∫t "Kh√≥" v·ªÅ m·∫∑c ƒë·ªãnh.
                            markBtn.innerHTML = `<i class="far fa-frown me-1"></i> Kh√≥`;
                            markBtn.classList.remove("text-success");
                            markBtn.classList.add("text-danger");
                            markBtn.style.pointerEvents = "auto";
                            resolveContainer.innerHTML = ""; // ƒê·∫£m b·∫£o n√∫t "T√¥i ƒë√£ hi·ªÉu" kh√¥ng hi·ªÉn th·ªã.
                        }
                    });

                // Hi·ªÉn th·ªã h√¨nh ·∫£nh khi ch·ªçn ·∫£nh kh√°c (trong form ch·ªânh s·ª≠a)
                // L·∫Øng nghe s·ª± ki·ªán 'change' tr√™n input file c√≥ ID 'editImageInput'.
                document.getElementById('editImageInput').addEventListener('change', function(event) {
                    const fileInput = event.target;
                    const previewImg = document.getElementById(
                        'editImagePreview'); // Element ƒë·ªÉ hi·ªÉn th·ªã ·∫£nh xem tr∆∞·ªõc.

                    // Ki·ªÉm tra xem c√≥ file n√†o ƒë∆∞·ª£c ch·ªçn kh√¥ng.
                    if (fileInput.files && fileInput.files[0]) {
                        const reader = new FileReader(); // T·∫°o ƒë·ªëi t∆∞·ª£ng FileReader ƒë·ªÉ ƒë·ªçc n·ªôi dung file.

                        reader.onload = function(e) {
                            previewImg.src = e.target
                                .result; // G√°n data URL c·ªßa ·∫£nh v√†o thu·ªôc t√≠nh src c·ªßa th·∫ª <img>.
                            previewImg.classList.remove('d-none'); // Hi·ªÉn th·ªã ·∫£nh xem tr∆∞·ªõc.
                        };

                        reader.readAsDataURL(fileInput.files[0]); // ƒê·ªçc file d∆∞·ªõi d·∫°ng data URL.
                    } else {
                        previewImg.src = ''; // X√≥a src n·∫øu kh√¥ng c√≥ file.
                        previewImg.classList.add('d-none'); // ·∫®n ·∫£nh xem tr∆∞·ªõc.
                    }
                });

                // Hi·ªÉn th·ªã ·∫£nh hi·ªán c√≥ (n·∫øu c√≥) khi load c√¢u h·ªèi
                let imagePathInput = document.getElementById("editImagePath"); // Input ·∫©n ch·ª©a ƒë∆∞·ªùng d·∫´n ·∫£nh.
                let imagePreview = document.getElementById("editImagePreview"); // Th·∫ª img ƒë·ªÉ hi·ªÉn th·ªã ·∫£nh.
                let imagePath = document.querySelector(
                    ".image_path"); // Th·∫ª img kh√°c ƒë·ªÉ hi·ªÉn th·ªã ·∫£nh tr√™n flashcard.

                if (image) { // N·∫øu c√≥ ƒë∆∞·ªùng d·∫´n ·∫£nh t·ª´ d·ªØ li·ªáu c√¢u h·ªèi.
                    imagePath.src =
                        `http://localhost:8000/storage/${encodeURIComponent(image)}`; // ƒê·∫∑t src cho ·∫£nh hi·ªÉn th·ªã tr√™n flashcard.
                    imagePath.classList.remove("d-none"); // Hi·ªÉn th·ªã ·∫£nh.
                    // X·ª≠ l√Ω l·ªói n·∫øu ·∫£nh kh√¥ng t·∫£i ƒë∆∞·ª£c.
                    imagePath.onerror = function() {
                        imagePath.classList.add("d-none"); // ·∫®n ·∫£nh n·∫øu b·ªã l·ªói.
                    };

                    // C·∫≠p nh·∫≠t gi√° tr·ªã v√† hi·ªÉn th·ªã ·∫£nh trong form ch·ªânh s·ª≠a.
                    imagePathInput.value = `http://localhost:8000/storage/${encodeURIComponent(image)}`;
                    imagePreview.src = imagePathInput.value;
                    imagePreview.classList.remove("d-none");
                } else {
                    // N·∫øu kh√¥ng c√≥ ·∫£nh, ·∫©n t·∫•t c·∫£ c√°c ph·∫ßn t·ª≠ li√™n quan ƒë·∫øn ·∫£nh.
                    imagePath.classList.add("d-none");
                    imagePathInput.value = "";
                    imagePreview.classList.add("d-none");
                }

                // C·∫≠p nh·∫≠t ch·ªâ s·ªë c√¢u h·ªèi (v√≠ d·ª•: "1/10")
                document.querySelector(".current-question").textContent = currentIndex +
                    1; // S·ªë c√¢u h·ªèi hi·ªán t·∫°i (b·∫Øt ƒë·∫ßu t·ª´ 1).
                document.querySelector(".total-questions").textContent = questions.length; // T·ªïng s·ªë c√¢u h·ªèi.

                // C·∫≠p nh·∫≠t form edit & delete (URL action cho form)
                // C·∫≠p nh·∫≠t action c·ªßa form ch·ªânh s·ª≠a c√¢u h·ªèi v·ªõi ID c·ªßa c√¢u h·ªèi hi·ªán t·∫°i.
                document.getElementById("editQuestionForm").action =
                    `{{ route('flashcard_define_essay.update', ':id') }}`.replace(':id', cardData.id);
                // C·∫≠p nh·∫≠t action c·ªßa form x√≥a c√¢u h·ªèi.
                document.getElementById("deleteForm").action =
                    `{{ route('flashcard_define_essay.destroy', ':id') }}`.replace(':id', cardData.id);

                // Load d·ªØ li·ªáu c√¢u h·ªèi v√† tr·∫£ l·ªùi v√†o c√°c input trong form s·ª≠a.
                const editQuestionInput = document.getElementById("editQuestionContent");
                if (editQuestionInput) {
                    editQuestionInput.value = question.content; // ƒê·∫∑t n·ªôi dung c√¢u h·ªèi v√†o input.
                }

                const editAnswerInput = document.getElementById("editAnswerContent");
                if (editAnswerInput) {
                    editAnswerInput.value = answer; // ƒê·∫∑t n·ªôi dung c√¢u tr·∫£ l·ªùi v√†o input.
                }
            }

            // N√∫t l√πi c√¢u h·ªèi
            document.querySelector(".prev-question").addEventListener("click", function() {
                // N·∫øu currentIndex l·ªõn h∆°n 0, t·ª©c l√† v·∫´n c√≤n c√¢u h·ªèi ph√≠a tr∆∞·ªõc.
                if (currentIndex > 0) {
                    currentIndex--; // Gi·∫£m ch·ªâ s·ªë c√¢u h·ªèi.
                    updateQuestion(); // C·∫≠p nh·∫≠t giao di·ªán.
                }
            });

            // N√∫t ti·∫øn c√¢u h·ªèi
            document.querySelector(".next-question").addEventListener("click", function() {
                // N·∫øu currentIndex nh·ªè h∆°n t·ªïng s·ªë c√¢u h·ªèi tr·ª´ 1 (t·ª©c l√† ch∆∞a ph·∫£i c√¢u cu·ªëi c√πng).
                if (currentIndex < questions.length - 1) {
                    currentIndex++; // TƒÉng ch·ªâ s·ªë c√¢u h·ªèi.
                    updateQuestion(); // C·∫≠p nh·∫≠t giao di·ªán.
                }
            });

            // B·∫Øt s·ª± ki·ªán khi click v√†o s·ªë c√¢u h·ªèi hi·ªán t·∫°i ƒë·ªÉ load l·∫°i c√¢u h·ªèi ƒë·∫ßu ti√™n
            // (ƒê√¢y l√† m·ªôt t√≠nh nƒÉng ti·ªán √≠ch ƒë·ªÉ ng∆∞·ªùi d√πng c√≥ th·ªÉ quay v·ªÅ c√¢u h·ªèi ƒë·∫ßu ti√™n nhanh ch√≥ng).
            document.querySelector(".current-question").addEventListener("click", function() {
                currentIndex = 0; // ƒê·∫∑t ch·ªâ s·ªë v·ªÅ 0.
                updateQuestion(); // C·∫≠p nh·∫≠t giao di·ªán.
            });

            // B·∫Øt s·ª± ki·ªán khi click v√†o n√∫t "Kh√≥"
            // Duy·ªát qua t·∫•t c·∫£ c√°c ph·∫ßn t·ª≠ c√≥ class "mark-difficult" (ƒë·ªÉ ƒë·∫£m b·∫£o g·∫Øn s·ª± ki·ªán cho c·∫£ n√∫t "Kh√≥" ·ªü l·∫ßn ƒë·∫ßu v√† sau khi reset)
            document.querySelectorAll(".mark-difficult").forEach(el => {
                el.addEventListener("click", function() {
                    const questionId = this.dataset
                        .questionId; // L·∫•y ID c√¢u h·ªèi t·ª´ thu·ªôc t√≠nh data-question-id c·ªßa n√∫t.

                    // G·ª≠i y√™u c·∫ßu POST ƒë·ªÉ ƒë√°nh d·∫•u c√¢u h·ªèi l√† kh√≥.
                    fetch("{{ route('flashcard.mark_difficult') }}", {
                            method: "POST",
                            headers: {
                                "X-CSRF-TOKEN": "{{ csrf_token() }}",
                                "Content-Type": "application/json"
                            },
                            body: JSON.stringify({
                                question_id: questionId
                            })
                        })
                        .then(res => res.json())
                        .then(data => {
                            // ‚úÖ C·∫≠p nh·∫≠t giao di·ªán n√∫t "Kh√≥" sau khi ƒë√°nh d·∫•u th√†nh c√¥ng
                            this.innerHTML =
                                '<i class="fas fa-check-circle me-1"></i> ƒê√£ ƒë√°nh d·∫•u'; // Thay ƒë·ªïi n·ªôi dung n√∫t.
                            this.classList.remove("text-danger"); // X√≥a m√†u ƒë·ªè.
                            this.classList.add("text-success"); // Th√™m m√†u xanh l√° c√¢y.
                            this.style.pointerEvents =
                                "none"; // V√¥ hi·ªáu h√≥a n√∫t ƒë·ªÉ tr√°nh ƒë√°nh d·∫•u l·∫°i.

                            // ‚úÖ Hi·ªán l·∫°i n√∫t "T√¥i ƒë√£ hi·ªÉu"
                            const resolveContainer = document.querySelector(
                                ".resolve-container");
                            resolveContainer.innerHTML = `
                                <button class="btn btn-warning mark-resolved mt-2 mb-2" data-question-id="${questionId}" style="min-width: 140px;">
                                    <i class="fas fa-check"></i> T√¥i ƒë√£ hi·ªÉu
                                </button>
                            `;

                            // G·∫Øn s·ª± ki·ªán cho n√∫t "T√¥i ƒë√£ hi·ªÉu" m·ªõi ƒë∆∞·ª£c th√™m v√†o DOM.
                            document.querySelector(".mark-resolved").addEventListener("click",
                                function() {
                                    // G·ª≠i y√™u c·∫ßu POST ƒë·ªÉ ƒë√°nh d·∫•u c√¢u h·ªèi l√† ƒë√£ gi·∫£i quy·∫øt.
                                    fetch("{{ route('flashcard.mark_resolved') }}", {
                                            method: "POST",
                                            headers: {
                                                "X-CSRF-TOKEN": "{{ csrf_token() }}",
                                                "Content-Type": "application/json"
                                            },
                                            body: JSON.stringify({
                                                question_id: questionId
                                            })
                                        })
                                        .then(res => res.json())
                                        .then(result => {
                                            if (result.status === "resolved") {
                                                // ‚úÖ Reset l·∫°i giao di·ªán "Kh√≥" sau khi ƒë√£ "T√¥i ƒë√£ hi·ªÉu"
                                                el.innerHTML = // S·ª≠ d·ª•ng 'el' v√¨ 'this' ·ªü ƒë√¢y l√† n√∫t 'mark-resolved'.
                                                    '<i class="far fa-frown me-1"></i> Kh√≥';
                                                el.classList.remove("text-success");
                                                el.classList.add("text-danger");
                                                el.style.pointerEvents =
                                                    "auto"; // K√≠ch ho·∫°t l·∫°i n√∫t "Kh√≥".
                                            }
                                        });
                                });
                        });
                });
            });

            // B·∫Øt s·ª± ki·ªán khi click vaÃÄo flashcard
            document.querySelector('.flashcard-wrapper')?.addEventListener('click', function(e) {
                // ‚õî B·ªè qua n·∫øu click v√†o n√∫t nghe ho·∫∑c n√∫t √¥n t·∫≠p
                if (e.target.closest('.play-audio') || e.target.closest('button')) return;

                const inner = document.getElementById('flashcardInner');
                if (inner) {
                    inner.classList.toggle('flipped');
                    if (typeof saveAnswer === 'function') saveAnswer();
                }
            });

            // H√†m 'getVoiceByLang' n√†y ƒë∆∞·ª£c d√πng ƒë·ªÉ t√¨m ki·∫øm v√† ch·ªçn gi·ªçng ƒë·ªçc ph√π h·ª£p nh·∫•t
            function getVoiceByLang(lang, genderPreference = 'female', preferredNames = []) {
                // L·∫•y t·∫•t c·∫£ c√°c gi·ªçng ƒë·ªçc c√≥ s·∫µn tr√™n h·ªá th·ªëng c·ªßa ng∆∞·ªùi d√πng.
                // 'speechSynthesis.getVoices()' tr·∫£ v·ªÅ m·ªôt m·∫£ng c√°c ƒë·ªëi t∆∞·ª£ng 'SpeechSynthesisVoice'.
                const voices = speechSynthesis.getVoices();
                let foundVoice = null; // Bi·∫øn ƒë·ªÉ l∆∞u tr·ªØ gi·ªçng ƒë·ªçc t√¨m ƒë∆∞·ª£c.

                // --- ∆Øu ti√™n 1: T√¨m gi·ªçng theo t√™n ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh v√† gi·ªõi t√≠nh mong mu·ªën ---
                // Ki·ªÉm tra xem c√≥ danh s√°ch t√™n ∆∞u ti√™n n√†o ƒë∆∞·ª£c cung c·∫•p kh√¥ng (v√≠ d·ª•: ['Google Ti·∫øng Vi·ªát', 'Microsoft Zira']).
                if (preferredNames.length > 0) {
                    // L·∫∑p qua t·ª´ng t√™n trong danh s√°ch ∆∞u ti√™n.
                    for (const name of preferredNames) {
                        // S·ª≠ d·ª•ng 'find()' ƒë·ªÉ t√¨m gi·ªçng ƒë·ªçc ƒë·∫ßu ti√™n th·ªèa m√£n c√°c ƒëi·ªÅu ki·ªán:
                        foundVoice = voices.find(v =>
                            // 1. Ng√¥n ng·ªØ c·ªßa gi·ªçng ƒë·ªçc ph·∫£i kh·ªõp v·ªõi 'lang' (v√≠ d·ª•: 'vi-VN' ho·∫∑c 'en-US').
                            v.lang === lang &&
                            // 2. T√™n c·ªßa gi·ªçng ƒë·ªçc (chuy·ªÉn v·ªÅ ch·ªØ th∆∞·ªùng) ph·∫£i ch·ª©a t√™n ∆∞u ti√™n (c≈©ng chuy·ªÉn v·ªÅ ch·ªØ th∆∞·ªùng).
                            // V√≠ d·ª•: n·∫øu 'name' l√† "Microsoft An", n√≥ s·∫Ω t√¨m gi·ªçng "Microsoft An - Vietnamese (Vietnam)".
                            v.name.toLowerCase().includes(name.toLowerCase()) &&
                            // 3. Ki·ªÉm tra gi·ªõi t√≠nh:
                            //    - N·∫øu 'genderPreference' l√† 'any', th√¨ kh√¥ng c·∫ßn ki·ªÉm tra gi·ªõi t√≠nh (lu√¥n ƒë√∫ng).
                            //    - Ng∆∞·ª£c l·∫°i, t√™n gi·ªçng ƒë·ªçc (chuy·ªÉn v·ªÅ ch·ªØ th∆∞·ªùng) ph·∫£i ch·ª©a t·ª´ kh√≥a gi·ªõi t√≠nh (v√≠ d·ª•: "female").
                            (genderPreference === 'any' || v.name.toLowerCase().includes(genderPreference))
                        );
                        // N·∫øu t√¨m th·∫•y m·ªôt gi·ªçng ƒë·ªçc th·ªèa m√£n, tr·∫£ v·ªÅ ngay l·∫≠p t·ª©c ƒë·ªÉ s·ª≠ d·ª•ng gi·ªçng ∆∞u ti√™n n√†y.
                        if (foundVoice) return foundVoice;
                    }
                }

                // --- ∆Øu ti√™n 2: N·∫øu kh√¥ng t√¨m th·∫•y gi·ªçng n√†o theo t√™n ∆∞u ti√™n, t√¨m gi·ªçng ch·ªâ theo gi·ªõi t√≠nh mong mu·ªën ---
                // S·ª≠ d·ª•ng 'find()' ƒë·ªÉ t√¨m gi·ªçng ƒë·ªçc ƒë·∫ßu ti√™n th·ªèa m√£n c√°c ƒëi·ªÅu ki·ªán:
                foundVoice = voices.find(v =>
                    // 1. Ng√¥n ng·ªØ c·ªßa gi·ªçng ƒë·ªçc ph·∫£i kh·ªõp v·ªõi 'lang'.
                    v.lang === lang &&
                    // 2. Ki·ªÉm tra gi·ªõi t√≠nh t∆∞∆°ng t·ª± nh∆∞ tr√™n.
                    (genderPreference === 'any' || v.name.toLowerCase().includes(genderPreference))
                );
                // N·∫øu t√¨m th·∫•y m·ªôt gi·ªçng ƒë·ªçc th·ªèa m√£n, tr·∫£ v·ªÅ n√≥.
                if (foundVoice) return foundVoice;

                // --- ∆Øu ti√™n 3: N·∫øu v·∫´n kh√¥ng t√¨m th·∫•y, ch·ªâ c·∫ßn t√¨m gi·ªçng theo ng√¥n ng·ªØ (b·∫•t k·ªÉ gi·ªõi t√≠nh) ---
                // N·∫øu kh√¥ng c√≥ gi·ªçng n√†o kh·ªõp v·ªõi ti√™u ch√≠ gi·ªõi t√≠nh ho·∫∑c t√™n ∆∞u ti√™n,
                // ch·ªâ c·∫ßn tr·∫£ v·ªÅ gi·ªçng ƒë·∫ßu ti√™n c√≥ ng√¥n ng·ªØ kh·ªõp.
                // N·∫øu kh√¥ng t√¨m th·∫•y gi·ªçng n√†o c·∫£, tr·∫£ v·ªÅ 'null'.
                return voices.find(v => v.lang === lang) || null;
            };

            // --- X·ª≠ l√Ω s·ª± ki·ªán khi danh s√°ch gi·ªçng ƒë·ªçc thay ƒë·ªïi ho·∫∑c ƒë∆∞·ª£c t·∫£i l·∫ßn ƒë·∫ßu ---
            // 'speechSynthesis.onvoiceschanged' l√† m·ªôt s·ª± ki·ªán ƒë∆∞·ª£c k√≠ch ho·∫°t khi tr√¨nh duy·ªát
            // ƒë√£ t·∫£i xong danh s√°ch c√°c gi·ªçng n√≥i ho·∫∑c khi c√≥ s·ª± thay ƒë·ªïi trong danh s√°ch ƒë√≥.
            // ƒêi·ªÅu n√†y r·∫•t quan tr·ªçng v√¨ 'getVoices()' c√≥ th·ªÉ tr·∫£ v·ªÅ m·∫£ng r·ªóng n·∫øu g·ªçi qu√° s·ªõm.
            speechSynthesis.onvoiceschanged = () => {
                const voices = speechSynthesis
                    .getVoices(); // L·∫•y l·∫°i danh s√°ch gi·ªçng ƒë·ªçc sau khi s·ª± ki·ªán k√≠ch ho·∫°t.
                // console.log(
                //     "--- Available voices (onvoiceschanged) ---"
                // ); // In ra ti√™u ƒë·ªÅ ƒë·ªÉ d·ªÖ theo d√µi trong console.

                // Ki·ªÉm tra xem c√≥ gi·ªçng ƒë·ªçc n√†o ƒë∆∞·ª£c t√¨m th·∫•y kh√¥ng.
                if (voices.length === 0) {
                    console.log(
                        "No voices found yet, trying again in a moment."); // Th√¥ng b√°o n·∫øu ch∆∞a c√≥ gi·ªçng n√†o.
                } else {
                    // L·∫∑p qua t·ª´ng gi·ªçng ƒë·ªçc ƒë·ªÉ in th√¥ng tin chi ti·∫øt.
                    voices.forEach((v, i) => {
                        // C·∫£i thi·ªán logic x√°c ƒë·ªãnh gi·ªõi t√≠nh:
                        // Ch√∫ng ta ki·ªÉm tra t√™n c·ªßa gi·ªçng ƒë·ªçc (chuy·ªÉn v·ªÅ ch·ªØ th∆∞·ªùng) ƒë·ªÉ ƒëo√°n gi·ªõi t√≠nh.
                        // ƒê√¢y l√† m·ªôt ph·ªèng ƒëo√°n d·ª±a tr√™n c√°c t√™n ph·ªï bi·∫øn c·ªßa gi·ªçng Microsoft nh∆∞ "Zira", "Ava" (n·ªØ)
                        // ho·∫∑c "David", "Mark" (nam).
                        const gender = v.name.toLowerCase().includes("female") || v.name.toLowerCase()
                            .includes("zira") || v.name.toLowerCase().includes("ava") || v.name
                            .toLowerCase().includes("emma") || v.name.toLowerCase().includes("jenny") ||
                            v.name.toLowerCase().includes("michelle") || v.name.toLowerCase().includes(
                                "aria") ? "Female" :
                            v.name.toLowerCase().includes("male") || v.name.toLowerCase().includes(
                                "david") || v.name.toLowerCase().includes("mark") || v.name
                            .toLowerCase().includes("andrew") || v.name.toLowerCase().includes(
                                "brian") || v.name.toLowerCase().includes("christopher") || v.name
                            .toLowerCase().includes("eric") || v.name.toLowerCase().includes("guy") || v
                            .name.toLowerCase().includes("roger") || v.name.toLowerCase().includes(
                                "steffan") ? "Male" : "Unknown";
                        // In th√¥ng tin chi ti·∫øt c·ªßa t·ª´ng gi·ªçng ƒë·ªçc ra console: s·ªë th·ª© t·ª±, t√™n, ng√¥n ng·ªØ v√† gi·ªõi t√≠nh ƒë√£ ƒëo√°n.
                        // console.log(`${i + 1}. Name: ${v.name}, Lang: ${v.lang}, Gender: ${gender}`);
                    });
                }
                // console.log("--- End of voices list ---"); // K·∫øt th√∫c danh s√°ch.
            };

            // --- X·ª≠ l√Ω s·ª± ki·ªán khi DOM (Document Object Model) ƒë√£ ƒë∆∞·ª£c t·∫£i ho√†n ch·ªânh ---
            // 'DOMContentLoaded' ƒë·∫£m b·∫£o r·∫±ng to√†n b·ªô HTML c·ªßa trang ƒë√£ ƒë∆∞·ª£c ph√¢n t√≠ch c√∫ ph√°p
            // v√† s·∫µn s√†ng ƒë·ªÉ thao t√°c. Ch√∫ng ta g·ªçi 'getVoices()' ·ªü ƒë√¢y m·ªôt l·∫ßn n·ªØa
            // ph√≤ng tr∆∞·ªùng h·ª£p 'onvoiceschanged' kh√¥ng k√≠ch ho·∫°t l·∫°i khi t·∫£i l·∫°i trang (n·∫øu gi·ªçng ƒë√£ s·∫µn s√†ng).
            document.addEventListener('DOMContentLoaded', () => {
                const voices = speechSynthesis.getVoices(); // L·∫•y danh s√°ch gi·ªçng ƒë·ªçc.
                // N·∫øu c√≥ gi·ªçng ƒë·ªçc ngay l·∫≠p t·ª©c khi DOMContentLoaded.
                if (voices.length > 0) {
                    console.log("--- Available voices (DOMContentLoaded) ---"); // In ra ti√™u ƒë·ªÅ.
                    voices.forEach((v, i) => {
                        // T∆∞∆°ng t·ª±, ƒëo√°n v√† in gi·ªõi t√≠nh c·ªßa t·ª´ng gi·ªçng ƒë·ªçc.
                        const gender = v.name.toLowerCase().includes("female") || v.name
                            .toLowerCase().includes("zira") || v.name.toLowerCase().includes(
                                "ava") || v.name.toLowerCase().includes("emma") || v.name
                            .toLowerCase()
                            .includes("jenny") || v.name.toLowerCase().includes("michelle") || v
                            .name.toLowerCase().includes("aria") ? "Female" :
                            v.name.toLowerCase().includes("male") || v.name.toLowerCase().includes(
                                "david") || v.name.toLowerCase().includes("mark") || v.name
                            .toLowerCase().includes("andrew") || v.name.toLowerCase().includes(
                                "brian") || v.name.toLowerCase().includes("christopher") || v.name
                            .toLowerCase().includes("eric") || v.name.toLowerCase().includes(
                                "guy") || v.name.toLowerCase().includes("roger") || v.name
                            .toLowerCase()
                            .includes("steffan") ? "Male" : "Unknown";
                        console.log(
                            `${i + 1}. Name: ${v.name}, Lang: ${v.lang}, Gender: ${gender}`);
                    });
                    console.log("--- End of voices list ---");
                } else {
                    // N·∫øu ch∆∞a c√≥ gi·ªçng n√†o, th√¥ng b√°o r·∫±ng ƒëang ƒë·ª£i 'onvoiceschanged'.
                    console.log(
                        "No voices available immediately on DOMContentLoaded. Waiting for onvoiceschanged."
                    );
                }
            });

            // L·∫Øng nghe s·ª± ki·ªán click tr√™n to√†n b·ªô t√†i li·ªáu.
            document.addEventListener('click', function(e) {
                if (e.target.closest('.play-audio')) {
                    const button = e.target.closest('.play-audio');

                    // üîé L·∫•y vƒÉn b·∫£n: n·∫øu c√≥ `data-text` th√¨ d√πng, n·∫øu kh√¥ng th√¨ l·∫•y t·ª´ .question_content ho·∫∑c .answer_content
                    let text = button.dataset.text || '';
                    const from = button.dataset.from;

                    if (!text && from === 'question') {
                        const qEl = document.querySelector('.question_content');
                        text = qEl ? qEl.textContent.trim() : '';
                    } else if (!text && from === 'answer') {
                        const aEl = document.querySelector('.answer_content');
                        text = aEl ? aEl.textContent.trim() : '';
                    }

                    if (!text) return; // Kh√¥ng c√≥ n·ªôi dung th√¨ b·ªè qua

                    const utterance = new SpeechSynthesisUtterance(text);

                    // üåê ƒêo√°n ng√¥n ng·ªØ
                    const vietnameseChars =
                        /[ƒÉ√¢ƒë√™√¥∆°∆∞√°√†·∫£√£·∫°·∫•·∫ß·∫©·∫´·∫≠·∫Ø·∫±·∫≥·∫µ·∫∑√©√®·∫ª·∫Ω·∫π·∫ø·ªÅ·ªÉ·ªÖ·ªá√≠√¨·ªâƒ©·ªã√≥√≤·ªè√µ·ªç·ªë·ªì·ªï·ªó·ªô·ªõ·ªù·ªü·ª°·ª£√∫√π·ªß≈©·ª•·ª©·ª´·ª≠·ªØ·ª±√Ω·ª≥·ª∑·ªπ·ªµ]/i;
                    const lang = vietnameseChars.test(text) ? 'vi-VN' : 'en-US';
                    utterance.lang = lang;

                    let voice = null;
                    if (lang === 'vi-VN') {
                        voice = getVoiceByLang('vi-VN', 'female', ['Microsoft An Online', 'Microsoft An']);
                    } else {
                        voice = getVoiceByLang('en-US', 'female', [
                            'Microsoft Ava Online (Natural)',
                            'Microsoft Emma Online (Natural)',
                            'Microsoft Jenny Online (Natural)',
                            'Microsoft Michelle Online (Natural)',
                            'Microsoft Aria Online (Natural)',
                            'Microsoft Zira'
                        ]);
                    }

                    if (voice) {
                        utterance.voice = voice;
                        console.log(`üîà Using voice: ${voice.name} (${voice.lang})`);
                    } else {
                        console.warn(`‚ö†Ô∏è No preferred voice found for ${lang}. Using default.`);
                    }

                    speechSynthesis.speak(utterance);
                }
            });

            // G·ªçi h√†m fetchQuestions khi DOM ƒë√£ t·∫£i xong
            // ƒê√¢y l√† ƒëi·ªÉm kh·ªüi ƒë·∫ßu, h√†m n√†y s·∫Ω ƒë∆∞·ª£c g·ªçi ngay sau khi trang ƒë∆∞·ª£c t·∫£i ƒë·ªÉ l·∫•y d·ªØ li·ªáu c√¢u h·ªèi ban ƒë·∫ßu.
            fetchQuestions();
        });
    </script>
@endsection
