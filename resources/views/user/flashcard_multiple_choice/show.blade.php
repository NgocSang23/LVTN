@extends('user.master')

@section('title', '√în luy·ªán c√°c b√†i ki·ªÉm tra')

@section('content')
    @if (Session::has('success'))
        <div class="alert alert-success fixed-top text-center p-3 shadow-lg js-div-dissappear"
            style="width: 100%; max-width: 400px; margin: 10px auto; z-index: 1050;">
            <i class="fas fa-check-circle me-2"></i> {{ Session::get('success') }}
        </div>
    @endif
    <meta name="csrf-token" content="{{ csrf_token() }}">
    <style>
        input.form-control:focus {
            outline: none;
            box-shadow: none;
            border-color: none;
        }
    </style>
    <div class="container mt-5">
        <div class="mb-3 d-flex">
            <a href="{{ route('user.dashboard') }}" class="btn btn-primary me-3">&lt;</a>
            <h4 class="topic_title align-content-start m-0" id="topic-title"></h4>
        </div>
        <div class="text-center mb-4">
            <h2 class="fw-bold">B√†i Ki·ªÉm Tra Tr·∫Øc Nghi·ªám</h2>
        </div>

        <div class="row">
            <!-- C√¢u h·ªèi v√† l·ª±a ch·ªçn -->
            <div class="col-lg-8">
                <div class="card shadow-sm p-4">
                    {{-- <form id="quiz-form" method="POST"> --}}
                    <div id="questions-container"></div>
                    <button type="submit" data-bs-toggle="modal" data-bs-target="#submitTestModal"
                        class="btn btn-success w-100 mt-3">N·ªôp b√†i</button>
                    {{-- </form> --}}
                </div>
            </div>

            <!-- Thanh b√™n ph·∫£i: B·ªô ƒë·∫øm th·ªùi gian v√† danh s√°ch c√¢u h·ªèi -->
            <div class="col-lg-4">
                <div class="card shadow-sm p-3 text-center">
                    <h5 class="fw-bold">Th·ªùi gian c√≤n l·∫°i</h5>
                    <span id="timer" class="badge bg-danger fs-4 py-2 px-3 mt-2">10:00</span>
                </div>
                <div class="card shadow-sm p-3 mt-3">
                    <h5 class="fw-bold">C√¢u h·ªèi</h5>
                    <div class="d-flex flex-wrap justify-content-center" id="questions-number" style="gap: 8px;"></div>
                </div>
                @if (Auth::guard('web')->user()->id == $test->user_id)
                    <div class="d-flex justify-content-start mt-3">
                        <button class="btn btn-warning me-2" data-bs-toggle="modal"
                            data-bs-target="#editTestModal">S·ª≠a</button>
                        <button class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#deleteTestModal">X√≥a</button>
                    </div>
                @endif
            </div>
        </div>
    </div>

    <!-- Modal x√°c nh·∫≠n x√≥a -->
    <div class="modal fade" id="deleteTestModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog" style="max-width: 400px;">
            <div class="modal-content" style="border-radius: 12px; box-shadow: 0 5px 15px rgba(0,0,0,0.2); border: none;">
                <div class="modal-header"
                    style="background: linear-gradient(135deg, #ff6a6a, #ff0000); color: white; border-top-left-radius: 12px; border-top-right-radius: 12px;">
                    <h5 class="modal-title">‚ö†Ô∏è X√°c nh·∫≠n x√≥a</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"
                        style="filter: brightness(0) invert(1); opacity: 0.8;"></button>
                </div>
                <div class="modal-body" style="font-size: 1rem; color: #333; text-align: center; padding: 20px;">
                    <p>B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a b√†i ki·ªÉm tra n√†y kh√¥ng?</p>
                </div>
                <div class="modal-footer d-flex justify-content-center" style="padding: 20px;">
                    <form id="deleteForm" method="POST" action="{{ route('flashcard_multiple_choice.destroy', 0) }}">
                        @csrf
                        @method('DELETE')
                        <button type="submit" class="btn btn-danger"
                            style="padding: 8px 20px; border-radius: 6px;">X√≥a</button>
                    </form>
                    <button type="button" class="btn btn-secondary ms-2" data-bs-dismiss="modal"
                        style="padding: 8px 20px; border-radius: 6px;">H·ªßy</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal x√°c nh·∫≠n n·ªôp b√†i -->
    <div class="modal fade" id="submitTestModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog" style="max-width: 400px;">
            <div class="modal-content" style="border-radius: 12px; box-shadow: 0 5px 15px rgba(0,0,0,0.2); border: none;">
                <div class="modal-header"
                    style="background: linear-gradient(135deg, #00c6ff, #0072ff); color: white; border-top-left-radius: 12px; border-top-right-radius: 12px;">
                    <h5 class="modal-title">üì§ X√°c nh·∫≠n n·ªôp b√†i</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"
                        style="filter: brightness(0) invert(1); opacity: 0.8;"></button>
                </div>
                <div class="modal-body" style="font-size: 1rem; color: #333; text-align: center; padding: 20px;">
                    <p>B·∫°n mu·ªën n·ªôp b√†i kh√¥ng?</p>
                </div>
                <div class="modal-footer d-flex justify-content-center" style="padding: 20px;">
                    <button type="submit" data-bs-toggle="modal" data-bs-target="#resultModal" id="confirmSubmit"
                        class="btn btn-danger" style="padding: 8px 20px; border-radius: 6px;">C√≥</button>
                    <button type="button" class="btn btn-secondary ms-2" data-bs-dismiss="modal"
                        style="padding: 8px 20px; border-radius: 6px;">H·ªßy</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal k·∫øt qu·∫£ -->
    <div class="modal fade" id="resultModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" style="max-width: 400px;">
            <div class="modal-content" style="border-radius: 12px; box-shadow: 0 5px 15px rgba(0,0,0,0.2); border: none;">
                <div class="modal-header"
                    style="background: linear-gradient(135deg, #00c6ff, #0072ff); color: white; border-top-left-radius: 12px; border-top-right-radius: 12px;">
                    <h5 class="modal-title" style="font-weight: 600;">üéâ K·∫øt qu·∫£</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"
                        style="filter: brightness(0) invert(1); opacity: 0.8;"></button>
                </div>
                <div class="modal-body" style="font-size: 1.1rem; color: #333; text-align: center; padding: 20px;">
                    <p id="resultMessage" style="margin-bottom: 10px; font-weight: 500;"></p>
                    <p id="resultScore" style="font-size: 1.2rem; color: #0072ff; font-weight: 600;"></p>
                    <p id="resultTime" style="margin-top: 10px;"></p>
                </div>
                <div class="modal-footer d-flex justify-content-center" style="padding: 20px;">
                    <a href="{{ route('user.dashboard') }}" class="btn btn-primary"
                        style="padding: 8px 20px; border-radius: 6px;">ƒê√≥ng</a>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal S·ª≠a B√†i Ki·ªÉm Tra -->
    <div class="modal fade" id="editTestModal" tabindex="-1" aria-labelledby="editTestModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content" style="border-radius: 12px; box-shadow: 0 5px 15px rgba(0,0,0,0.2); border: none;">
                <div class="modal-header"
                    style="background: linear-gradient(135deg, #4facfe, #00f2fe); color: white; border-top-left-radius: 12px; border-top-right-radius: 12px;">
                    <h5 class="modal-title" id="editTestModalLabel">‚úèÔ∏è Ch·ªânh s·ª≠a b√†i ki·ªÉm tra</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"
                        style="filter: brightness(0) invert(1); opacity: 0.8;"></button>
                </div>
                <div class="modal-body">
                    <form id="editTestForm" action="{{ route('flashcard_multiple_choice.update', 0) }}" method="POST">
                        @csrf
                        @method('PUT')
                        <div class="row mb-3">
                            <div class="col-md-8">
                                <label for="editTitle" class="form-label">N·ªôi dung b√†i ki·ªÉm tra</label>
                                <input type="text" name="test_content" class="form-control" id="editTitle">
                                @error('test_content')
                                    <small class="text-danger">{{ $message }}</small>
                                @enderror
                            </div>
                            <div class="col-md-4">
                                <label for="editTime" class="form-label">Th·ªùi gian (ph√∫t)</label>
                                <input type="number" name="test_time" class="form-control" id="editTime">\
                                @error('test_time')
                                    <small class="text-danger">{{ $message }}</small>
                                @enderror
                            </div>
                        </div>
                        <div id="editQuestionsContainer"></div>

                        <input type="submit" class="btn btn-primary mt-3" style="padding: 8px 20px; border-radius: 6px;"
                            value="L∆∞u thay ƒë·ªïi">
                    </form>
                </div>
            </div>
        </div>
    </div>

    {{-- <script src="{{ asset('assets/js/multiple-question.js') }}"></script> --}}

    <script>
        document.addEventListener("DOMContentLoaded", function() {
            const userId = {{ Auth::guard('web')->user()->id }};
            let multiplequestions = []; // M·∫£ng l∆∞u danh s√°ch c√¢u h·ªèi t·ª´ API
            let testId = window.location.pathname.split("/").pop(); // L·∫•y ID b√†i ki·ªÉm tra t·ª´ URL
            let timeLeft = 0; // Bi·∫øn l∆∞u th·ªùi gian c√≤n l·∫°i c·ªßa b√†i ki·ªÉm tra
            let initialTime = 0; // Bi·∫øn l∆∞u th·ªùi gian b√†i ki·ªÉm tra ban ƒë·∫ßu
            let statusQuestions = {}; // ƒê·ªëi t∆∞·ª£ng l∆∞u tr·∫°ng th√°i c√¢u h·ªèi ƒë√£ tr·∫£ l·ªùi

            // H√†m g·ªçi API ƒë·ªÉ l·∫•y danh s√°ch c√¢u h·ªèi
            async function fetchTests() {
                try {
                    // G·ªçi API ƒë·ªÉ l·∫•y danh s√°ch c√¢u h·ªèi
                    let response = await fetch(`http://127.0.0.1:8000/api/card_multiple_choice/${testId}`);
                    let data = await response.json();
                    let tests = data.data;

                    // Ki·ªÉm tra xem API c√≥ tr·∫£ v·ªÅ d·ªØ li·ªáu kh√¥ng
                    if (data.status_code === 200 && tests.multiplequestions.length > 0) {
                        multiplequestions = tests.multiplequestions; // L∆∞u danh s√°ch c√¢u h·ªèi
                        // console.log(tests.id);

                        document.getElementById("topic-title").innerText = tests.questionnumbers?.[0]?.topic?.title || "Kh√¥ng c√≥ ti√™u ƒë·ªÅ";

                        document.getElementById("deleteForm").action = `{{ route('flashcard_multiple_choice.destroy', ':id') }}`.replace(':id', tests.id);
                        document.getElementById("editTestForm").action = `{{ route('flashcard_multiple_choice.update', ':id') }}`.replace(':id', tests.id);

                        // Chuy·ªÉn ƒë·ªïi th·ªùi gian t·ª´ ƒë·ªãnh d·∫°ng "MM:SS" th√†nh t·ªïng s·ªë gi√¢y
                        timeLeft = tests.time.split(":").reduce((acc, val) => acc * 60 + parseInt(val), 0);
                        initialTime = timeLeft; // ‚ûú l∆∞u l·∫°i th·ªùi gian ban ƒë·∫ßu

                        // Load c√°c th√¥ng tin v√†o modal s·ª≠a b√†i ki·ªÉm tra
                        document.getElementById("editTitle").value = tests.content;
                        document.getElementById('editTime').value = parseInt(tests.time.split(':')[1]);

                        let containerEdit = document.getElementById("editQuestionsContainer");
                        containerEdit.innerHTML = "";

                        // L·∫∑p qua t·ª´ng c√¢u h·ªèi trong b√†i ki·ªÉm tra
                        tests.multiplequestions.forEach((question, index) => {
                            let option = '';
                            let optionIds = ''; // M·∫£ng l∆∞u option_id b·∫±ng input hidden
                            let correctAnswer = 0;

                            // L·∫∑p qua c√°c option c·ªßa c√°c c√¢u h·ªèi
                            question.testresults.forEach((opt, idx) => {
                                if (opt.answer === "1") {
                                    correctAnswer = idx;
                                }
                                option += `
                                    <div class="col-md-6 mb-2">
                                        <label class="form-label">Ph∆∞∆°ng √°n ${String.fromCharCode(65 + idx)}</label>
                                        <input type="text" class="form-control" name="option_content[${index}][]" value="${opt.option.content}" id="opt${question.id}-${idx}">
                                        @error('option_content')
                                            <small class="text-danger">{{ $message }}</small>
                                        @enderror
                                    </div>
                                `;
                                // Th√™m input hidden cho option_id
                                optionIds += `<input type="hidden" name="option_id[${index}][]" value="${opt.option.id}">`;
                            });

                            containerEdit.innerHTML += `
                                <input type="hidden" name="question_id[${index}]" value="${question.id}">
                                ${optionIds}
                                <div class="card mb-3 p-3" style="border-radius: 8px; border: 1px solid #ddd;">
                                    <h6>C√¢u h·ªèi ${index + 1}</h6>
                                    <div class="mb-2">
                                        <label class="form-label">N·ªôi dung c√¢u h·ªèi</label>
                                        <input type="text" class="form-control" name="multiple_question[]" value="${question.content}">
                                        @error('multiple_question.*')
                                            <small class="text-danger">{{ $message }}</small>
                                        @enderror
                                    </div>
                                    <div class="row">
                                        ${option}
                                    </div>
                                    <div class="mb-2">
                                        <label class="form-label">ƒê√°p √°n ƒë√∫ng</label>
                                        <select class="form-select" name="answer[${index}]">
                                            <option value="0" ${correctAnswer === 0 ? 'selected' : ''}>Ph∆∞∆°ng √°n A</option>
                                            <option value="1" ${correctAnswer === 1 ? 'selected' : ''}>Ph∆∞∆°ng √°n B</option>
                                            <option value="2" ${correctAnswer === 2 ? 'selected' : ''}>Ph∆∞∆°ng √°n C</option>
                                            <option value="3" ${correctAnswer === 3 ? 'selected' : ''}>Ph∆∞∆°ng √°n D</option>
                                        </select>
                                        @error('answer.*')
                                            <small class="text-danger">{{ $message }}</small>
                                        @enderror
                                    </div>
                                </div>
                            `;
                        });

                        renderQuestions(); // G·ªçi h√†m ƒë·ªÉ hi·ªÉn th·ªã t·∫•t c·∫£ c√¢u h·ªèi ngay t·ª´ ƒë·∫ßu
                        renderNavigation(); // Hi·ªÉn th·ªã danh s√°ch s·ªë th·ª© t·ª± c√¢u h·ªèi
                        startTimer(); // B·∫Øt ƒë·∫ßu b·ªô ƒë·∫øm th·ªùi gian
                    } else {
                        document.getElementById("questions-number").innerText = "Kh√¥ng c√≥ d·ªØ li·ªáu!";
                    }
                } catch (error) {
                    console.error("L·ªói API:", error);
                    alert("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu, vui l√≤ng th·ª≠ l·∫°i sau.");
                }
            }

            // H√†m hi·ªÉn th·ªã danh s√°ch s·ªë th·ª© t·ª± c√¢u h·ªèi
            function renderNavigation() {
                let navContainer = document.getElementById("questions-number");
                // T·∫°o danh s√°ch c√°c n√∫t s·ªë th·ª© t·ª± c√¢u h·ªèi
                navContainer.innerHTML = multiplequestions.map((_, index) =>
                    `<button class="btn btn-outline-primary btn-sm question-nav" id="btn-q${index}" onclick="scrollToQuestion(${index})">${index + 1}</button>`
                ).join("");
            }

            // H√†m hi·ªÉn th·ªã t·∫•t c·∫£ c√¢u h·ªèi ngay t·ª´ ƒë·∫ßu
            function renderQuestions() {
                let container = document.getElementById("questions-container");
                container.innerHTML = ""; // X√≥a n·ªôi dung c≈© tr∆∞·ªõc khi th√™m m·ªõi

                multiplequestions.forEach((question, index) => {
                    // Hi·ªÉn th·ªã n·ªôi dung c√¢u h·ªèi
                    container.innerHTML += `
                        <div class="card p-3 mb-3" id="question-${index}">
                            <h5 class="fw-bold">C√¢u ${index + 1}: ${question.content}</h5>
                            <div class="mt-3">
                                ${question.testresults?.map((opt, idx) => `
                                <div class="form-check">
                                        <input class="form-check-input option-input" type="radio" name="question${question.id}" value="${opt.option_id}" id="opt${question.id}-${idx}">
                                        <label class="form-check-label" for="opt${question.id}-${idx}">
                                            <strong>${String.fromCharCode(65 + idx)}.</strong> ${opt.option.content}
                                        </label>
                                    </div>
                                `).join('') || '<p>Kh√¥ng c√≥ ƒë√°p √°n</p>'}
                            </div>
                        </div>`;
                });

                // G√°n s·ª± ki·ªán khi ng∆∞·ªùi d√πng ch·ªçn ƒë√°p √°n
                document.querySelectorAll(".option-input").forEach(input => {
                    input.addEventListener("change", function() {
                        let questionId = this.name.replace("question", ""); // L·∫•y ID c√¢u h·ªèi
                        let selectedOptionId = this.value; // L·∫•y ID c·ªßa ph∆∞∆°ng √°n ƒë∆∞·ª£c ch·ªçn
                        let question = multiplequestions.find(q => q.id ==
                            questionId); // T√¨m c√¢u h·ªèi trong danh s√°ch
                        if (!question) return;

                        let selectedAnswer = question.testresults.find(opt => opt.option_id ==
                            selectedOptionId); // T√¨m ph∆∞∆°ng √°n ƒë∆∞·ª£c ch·ªçn

                        // X√≥a m√†u n·ªÅn c·ªßa c√°c ƒë√°p √°n tr∆∞·ªõc ƒë√≥
                        document.querySelectorAll(`input[name='question${questionId}']`).forEach(
                            radio => {
                                let label = radio.nextElementSibling;
                                label.classList.remove("bg-success", "bg-danger", "text-white", "p-1", "rounded");
                                radio.disabled = true; // Kh√≥a √¥ ch·ªçn sau khi ƒë√£ ch·ªçn ƒë√°p √°n
                            });

                        // ƒê√°nh d·∫•u ƒë√∫ng/sai
                        if (selectedAnswer && selectedAnswer.answer === "1") {
                            this.nextElementSibling.classList.add("bg-success", "text-white", "p-1", "rounded");
                        } else {
                            this.nextElementSibling.classList.add("bg-danger", "text-white", "p-1", "rounded");
                        }

                        // C·∫≠p nh·∫≠t tr·∫°ng th√°i c√¢u h·ªèi ƒë√£ tr·∫£ l·ªùi
                        statusQuestions[questionId] = true;
                        updateNavigationButtons();
                    });
                });
            }

            // C·∫≠p nh·∫≠t m√†u c·ªßa n√∫t ƒëi·ªÅu h∆∞·ªõng khi c√¢u h·ªèi ƒë√£ ƒë∆∞·ª£c tr·∫£ l·ªùi
            function updateNavigationButtons() {
                document.querySelectorAll(".question-nav").forEach((btn, index) => {
                    if (statusQuestions[multiplequestions[index].id]) {
                        btn.classList.add("btn-warning"); // N·∫øu ƒë√£ tr·∫£ l·ªùi, ƒë√°nh d·∫•u m√†u v√†ng
                    } else {
                        btn.classList.remove("btn-warning");
                    }
                });
            }

            // H√†m cu·ªôn ƒë·∫øn c√¢u h·ªèi khi b·∫•m v√†o s·ªë th·ª© t·ª±
            window.scrollToQuestion = function(index) {
                let questionElement = document.getElementById(`question-${index}`);
                if (questionElement) {
                    questionElement.scrollIntoView({
                        behavior: "smooth",
                        block: "start"
                    }); // Cu·ªôn m∆∞·ª£t
                }
            };

            // B·∫Øt ƒë·∫ßu b·ªô ƒë·∫øm th·ªùi gian
            function startTimer() {
                let timeDisplay = document.getElementById("timer");
                let updateTimer = () => {
                    let minutes = Math.floor(timeLeft / 60);
                    let seconds = timeLeft % 60;
                    timeDisplay.textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;
                    if (timeLeft-- <= 0) {
                        clearInterval(timerInterval);
                        alert("H·∫øt th·ªùi gian! B√†i l√†m s·∫Ω t·ª± ƒë·ªông n·ªôp.");
                        document.getElementById("quiz-form").submit();
                    }
                };
                updateTimer();
                let timerInterval = setInterval(updateTimer, 1000);
            }

            // Hi·ªÉn th·ªã k·∫øt qu·∫£ b√†i l√†m
            document.getElementById("confirmSubmit").addEventListener("click", function() {
                let correctCount = 0;
                let totalQuestions = multiplequestions.length;

                multiplequestions.forEach(question => {
                    let selected = document.querySelector(`input[name='question${question.id}']:checked`);
                    if (selected) {
                        let selectedOptionId = parseInt(selected.value);
                        let selectAnswer = question.testresults.find(opt => opt.option_id ===
                            selectedOptionId);
                        if (selectAnswer && selectAnswer.answer === "1") {
                            correctCount++;
                        }
                    }
                });

                let score = (correctCount / totalQuestions) * 100;
                let textResult = `B·∫°n ƒë√£ tr·∫£ l·ªùi ƒë√∫ng ${correctCount}/${totalQuestions} c√¢u h·ªèi`;

                let timeSpent = initialTime - timeLeft;
                if (timeSpent < 0) timeSpent = 0;
                let minutes = Math.floor(timeSpent / 60);
                let seconds = timeSpent % 60;
                let timeMessage = `Th·ªùi gian l√†m b√†i: ${minutes} ph√∫t ${seconds.toString().padStart(2, '0')} gi√¢y`;

                document.getElementById("resultMessage").innerText = textResult;
                document.getElementById("resultScore").innerText = `ƒêi·ªÉm c·ªßa b·∫°n l√† ${score}`;
                document.getElementById("resultTime").innerText = timeMessage;

                saveHistory(correctCount, totalQuestions);
            });

            // L∆∞u l·ªãch s·ª≠ b√†i l√†m
            function saveHistory(correctCount, totalQuestions) {
                // T√≠nh ƒëi·ªÉm s·ªë: s·ªë c√¢u ƒë√∫ng / t·ªïng s·ªë c√¢u * 100 (%)
                let score = (correctCount / totalQuestions) * 100;

                let timeSpent = initialTime - timeLeft;
                // N·∫øu l·ª° timeSpent b·ªã √¢m, cho b·∫±ng 0
                if (timeSpent < 0) timeSpent = 0;
                // Chuy·ªÉn sang ph√∫t, gi√¢y
                let minutes = Math.floor(timeSpent / 60);
                let seconds = timeSpent % 60;
                let timeSpentStr = `${minutes} ph√∫t ${seconds.toString().padStart(2, '0')} gi√¢y`;

                // T·∫°o FormData ƒë·ªÉ ch·ª©a d·ªØ li·ªáu g·ª≠i ƒëi
                let formData = new FormData();
                formData.append("correct_count", correctCount);
                formData.append("total_questions", totalQuestions);
                formData.append("score", score.toFixed(2)); // ƒêi·ªÉm s·ªë (c√≥ th·ªÉ l√†m tr√≤n 2 ch·ªØ s·ªë)
                formData.append("time_spent", timeSpentStr);
                formData.append("test_id", testId);
                formData.append("user_id", userId);

                // L·∫•y CSRF token t·ª´ th·∫ª meta (Laravel y√™u c·∫ßu khi POST)
                let csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');
                formData.append("_token", csrfToken);

                // G·ª≠i d·ªØ li·ªáu qua fetch API
                fetch("user/history/save", {
                        method: "POST",
                        body: formData
                    })
                    .then(response => response.json()) // Parse response JSON t·ª´ server
                    .then(data => {
                        console.log("L·ªãch s·ª≠ b√†i l√†m ƒë√£ l∆∞u:", data);
                    })
                    .catch(error => {
                        console.error("L·ªói khi l∆∞u l·ªãch s·ª≠ b√†i l√†m:", error);
                    });
            }

            // G·ªçi API khi trang t·∫£i xong
            fetchTests();
        });
    </script>
@endsection

@section('css')
    <link rel="stylesheet" href="{{ asset('assets/css/message.css') }}" />
@endsection

@section('js')
    @if (Session::has('success'))
        <script src="{{ asset('assets/js/message.js') }}"></script>
    @endif
@endsection