document.addEventListener("DOMContentLoaded", function () {
    // L·∫•y d·ªØ li·ªáu b√†i ki·ªÉm tra ƒë∆∞·ª£c truy·ªÅn t·ª´ PHP (Laravel Blade) d∆∞·ªõi d·∫°ng JSON.
    // `quizData` ch·ª©a m·ªôt m·∫£ng c√°c ƒë·ªëi t∆∞·ª£ng c√¢u h·ªèi. M·ªói ƒë·ªëi t∆∞·ª£ng c√≥ th·ªÉ c√≥ `question`, `display_question`, v√† `correct_answer_text`.
    const quizData = window.quizData ?? [];

    // `?? []` ƒë·∫£m b·∫£o r·∫±ng n·∫øu `$quizData` kh√¥ng t·ªìn t·∫°i, n√≥ s·∫Ω l√† m·ªôt m·∫£ng r·ªóng.

    // L·∫•y c√°c ph·∫ßn t·ª≠ DOM c·∫ßn thi·∫øt b·∫±ng ID c·ªßa ch√∫ng.
    const quizContainer = document.getElementById("quizContainer"); // N∆°i hi·ªÉn th·ªã c√¢u h·ªèi hi·ªán t·∫°i.
    const submitButtonWrapper = document.getElementById("submitButtonWrapper"); // Wrapper ch·ª©a n√∫t "G·ª≠i b√†i ki·ªÉm tra".
    const finalSubmitBtn = document.getElementById("finalSubmitBtn"); // N√∫t "G·ª≠i b√†i ki·ªÉm tra" trong modal x√°c nh·∫≠n.
    const submitExamBtn = document.getElementById("submitExamBtn"); // N√∫t "G·ª≠i b√†i ki·ªÉm tra" ch√≠nh b√™n ngo√†i modal.

    // --- X·ª≠ l√Ω khi kh√¥ng c√≥ d·ªØ li·ªáu b√†i ki·ªÉm tra ---
    // Ki·ªÉm tra xem `quizData` c√≥ r·ªóng ho·∫∑c kh√¥ng h·ª£p l·ªá kh√¥ng.
    if (!quizData || quizData.length === 0) {
        // N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu, hi·ªÉn th·ªã th√¥ng b√°o c·∫£nh b√°o trong `quizContainer`.
        quizContainer.innerHTML = `
            <div class="alert alert-warning text-center">
                Kh√¥ng c√≥ d·ªØ li·ªáu ph√π h·ª£p. Vui l√≤ng th·ª≠ l·∫°i.
            </div>`;
        // ·∫®n n√∫t n·ªôp b√†i v√¨ kh√¥ng c√≥ c√¢u h·ªèi ƒë·ªÉ n·ªôp.
        submitButtonWrapper.style.display = "none";
        // D·ª´ng vi·ªác th·ª±c thi c√°c ph·∫ßn c√≤n l·∫°i c·ªßa script.
        return;
    }

    // --- X·ª≠ l√Ω s·ª± ki·ªán khi ng∆∞·ªùi d√πng c·ªë g·∫Øng r·ªùi kh·ªèi trang ---
    // H√†m n√†y s·∫Ω hi·ªÉn th·ªã m·ªôt th√¥ng b√°o c·∫£nh b√°o ti√™u chu·∫©n c·ªßa tr√¨nh duy·ªát
    // n·∫øu ng∆∞·ªùi d√πng c·ªë g·∫Øng ƒë√≥ng tab/c·ª≠a s·ªï ho·∫∑c ƒëi·ªÅu h∆∞·ªõng ƒëi n∆°i kh√°c.
    window.onbeforeunload = () =>
        "B·∫°n c√≥ ch·∫Øc mu·ªën r·ªùi kh·ªèi b√†i ki·ªÉm tra? D·ªØ li·ªáu ch∆∞a l∆∞u s·∫Ω b·ªã m·∫•t.";

    // --- Kh·ªüi t·∫°o tr·∫°ng th√°i b√†i ki·ªÉm tra ---
    let currentIndex = 0; // Bi·∫øn theo d√µi ch·ªâ s·ªë c·ªßa c√¢u h·ªèi hi·ªán t·∫°i (b·∫Øt ƒë·∫ßu t·ª´ 0).
    // M·∫£ng `answers` s·∫Ω l∆∞u tr·ªØ c√¢u tr·∫£ l·ªùi c·ªßa ng∆∞·ªùi d√πng cho m·ªói c√¢u h·ªèi.
    // N√≥ ƒë∆∞·ª£c kh·ªüi t·∫°o v·ªõi ƒë·ªô d√†i b·∫±ng s·ªë l∆∞·ª£ng c√¢u h·ªèi v√† t·∫•t c·∫£ c√°c gi√° tr·ªã ban ƒë·∫ßu l√† chu·ªói r·ªóng.
    const answers = Array(quizData.length).fill("");

    // --- H√†m ki·ªÉm tra t·∫•t c·∫£ c√¢u h·ªèi ƒë√£ ƒë∆∞·ª£c tr·∫£ l·ªùi ch∆∞a ---
    const areAllQuestionsAnswered = () => {
        // S·ª≠ d·ª•ng `every()` ƒë·ªÉ ki·ªÉm tra xem m·ªçi ph·∫ßn t·ª≠ trong m·∫£ng `answers`
        // c√≥ kh√°c chu·ªói r·ªóng sau khi lo·∫°i b·ªè kho·∫£ng tr·∫Øng ƒë·∫ßu/cu·ªëi hay kh√¥ng.
        return answers.every((answer) => answer.trim() !== "");
    };

    // --- H√†m hi·ªÉn th·ªã c√¢u h·ªèi hi·ªán t·∫°i ---
    const renderQuestion = (index) => {
        const q = quizData[index]; // L·∫•y ƒë·ªëi t∆∞·ª£ng c√¢u h·ªèi hi·ªán t·∫°i t·ª´ `quizData`.
        const savedAnswer = answers[index] || ""; // L·∫•y c√¢u tr·∫£ l·ªùi ƒë√£ l∆∞u c·ªßa ng∆∞·ªùi d√πng cho c√¢u h·ªèi n√†y (n·∫øu c√≥).

        // T·∫°o HTML cho c√¢u h·ªèi, thay th·∫ø "___" b·∫±ng m·ªôt th·∫ª input.
        // `id` c·ªßa input l√† duy nh·∫•t cho m·ªói c√¢u h·ªèi ƒë·ªÉ d·ªÖ d√†ng truy c·∫≠p.
        // `value` c·ªßa input ƒë∆∞·ª£c ƒë·∫∑t l√† `savedAnswer` ƒë·ªÉ gi·ªØ l·∫°i c√¢u tr·∫£ l·ªùi n·∫øu ng∆∞·ªùi d√πng quay l·∫°i c√¢u h·ªèi tr∆∞·ªõc.
        const questionHtml = q.question.replace(
            "___",
            `<input type="text" class="fill-blank-input" id="userAnswer_${index}" value="${savedAnswer}" />`
        );

        // C·∫≠p nh·∫≠t n·ªôi dung c·ªßa `quizContainer` v·ªõi HTML c·ªßa c√¢u h·ªèi v√† c√°c n√∫t ƒëi·ªÅu h∆∞·ªõng.
        quizContainer.innerHTML = `
            <div class="question-container mb-4">
                <div class="bg-white text-dark p-4 rounded shadow-sm">
                    <p class="fw-bold">C√¢u ${index + 1} / ${quizData.length}</p>
                    <p class="mb-2">‚ùì <strong>${
                        q.display_question || q.question
                    }</strong></p>
                    <p>üîπ ${questionHtml}</p>
                    <div id="inputError" class="text-danger mt-2 fw-semibold" style="display:none;"></div>
                </div>
                <div class="nav-controls">
                    <button id="prevBtn" ${index === 0 ? "disabled" : ""}>
                        <i class="fas fa-arrow-left"></i> Quay l·∫°i
                    </button>
                    <button id="nextBtn">
                        ${
                            index === quizData.length - 1 ? "Ho√†n t·∫•t" : "Ti·∫øp theo"
                        } <i class="fas fa-arrow-right"></i>
                    </button>
                </div>
            </div>`;

        // L·∫•y tham chi·∫øu ƒë·∫øn input c·ªßa c√¢u h·ªèi hi·ªán t·∫°i.
        const currentInput = document.getElementById(`userAnswer_${index}`);
        if (currentInput) {
            // Th√™m tr√¨nh nghe s·ª± ki·ªán 'input' ƒë·ªÉ c·∫≠p nh·∫≠t `answers` ngay khi ng∆∞·ªùi d√πng g√µ.
            // ƒêi·ªÅu n√†y gi√∫p l∆∞u tr·∫°ng th√°i c√¢u tr·∫£ l·ªùi khi ng∆∞·ªùi d√πng di chuy·ªÉn gi·ªØa c√°c c√¢u h·ªèi.
            currentInput.addEventListener("input", (event) => {
                answers[index] = event.target.value.trim(); // C·∫≠p nh·∫≠t c√¢u tr·∫£ l·ªùi ƒë√£ g√µ.
                updateSubmitButtonState(); // C·∫≠p nh·∫≠t tr·∫°ng th√°i n√∫t "G·ª≠i b√†i ki·ªÉm tra".
            });
        }

        // --- X·ª≠ l√Ω s·ª± ki·ªán click cho n√∫t "Ti·∫øp theo" / "Ho√†n t·∫•t" ---
        document.getElementById("nextBtn").onclick = () => {
            const userInput = currentInput ? currentInput.value.trim() : ""; // L·∫•y gi√° tr·ªã t·ª´ input.

            // N·∫øu ng∆∞·ªùi d√πng ch∆∞a ƒëi·ªÅn v√†o ch·ªó tr·ªëng, hi·ªÉn th·ªã l·ªói.
            if (!userInput) {
                const errorDiv = document.getElementById("inputError");
                errorDiv.innerText =
                    "‚ö†Ô∏è Vui l√≤ng ƒëi·ªÅn v√†o ch·ªó tr·ªëng tr∆∞·ªõc khi ti·∫øp t·ª•c.";
                errorDiv.style.display = "block";
                return; // NgƒÉn kh√¥ng cho chuy·ªÉn sang c√¢u h·ªèi ti·∫øp theo.
            }

            answers[index] = userInput; // L∆∞u c√¢u tr·∫£ l·ªùi c·ªßa ng∆∞·ªùi d√πng.

            // N·∫øu ƒë√¢y l√† c√¢u h·ªèi cu·ªëi c√πng.
            if (index === quizData.length - 1) {
                submitButtonWrapper.style.display = "block"; // Hi·ªÉn th·ªã n√∫t "G·ª≠i b√†i ki·ªÉm tra".
                updateSubmitButtonState(); // C·∫≠p nh·∫≠t tr·∫°ng th√°i n√∫t.
            } else {
                currentIndex++; // TƒÉng ch·ªâ s·ªë c√¢u h·ªèi.
                renderQuestion(currentIndex); // Hi·ªÉn th·ªã c√¢u h·ªèi ti·∫øp theo.
                submitButtonWrapper.style.display = "none"; // ·∫®n n√∫t "G·ª≠i b√†i ki·ªÉm tra" n·∫øu ch∆∞a ph·∫£i c√¢u cu·ªëi.
            }
        };

        // --- X·ª≠ l√Ω s·ª± ki·ªán click cho n√∫t "Quay l·∫°i" ---
        // Ch·ªâ th√™m tr√¨nh nghe n·∫øu kh√¥ng ph·∫£i c√¢u h·ªèi ƒë·∫ßu ti√™n.
        if (index > 0) {
            document.getElementById("prevBtn").onclick = () => {
                if (currentInput) {
                    answers[index] = currentInput.value.trim(); // L∆∞u c√¢u tr·∫£ l·ªùi tr∆∞·ªõc khi quay l·∫°i.
                }
                currentIndex--; // Gi·∫£m ch·ªâ s·ªë c√¢u h·ªèi.
                renderQuestion(currentIndex); // Hi·ªÉn th·ªã c√¢u h·ªèi tr∆∞·ªõc ƒë√≥.
                submitButtonWrapper.style.display = "none"; // ·∫®n n√∫t "G·ª≠i b√†i ki·ªÉm tra".
            };
        }

        // C·∫≠p nh·∫≠t tr·∫°ng th√°i n√∫t "G·ª≠i b√†i ki·ªÉm tra" m·ªói khi m·ªôt c√¢u h·ªèi ƒë∆∞·ª£c render.
        updateSubmitButtonState();
    };

    // --- H√†m c·∫≠p nh·∫≠t tr·∫°ng th√°i c·ªßa n√∫t "G·ª≠i b√†i ki·ªÉm tra" ---
    // N√∫t s·∫Ω ƒë∆∞·ª£c k√≠ch ho·∫°t (enabled) n·∫øu t·∫•t c·∫£ c√¢u h·ªèi ƒë√£ ƒë∆∞·ª£c tr·∫£ l·ªùi, ng∆∞·ª£c l·∫°i s·∫Ω b·ªã v√¥ hi·ªáu h√≥a (disabled).
    const updateSubmitButtonState = () => {
        if (areAllQuestionsAnswered()) {
            submitExamBtn.removeAttribute("disabled"); // B·ªè thu·ªôc t√≠nh disabled.
        } else {
            submitExamBtn.setAttribute("disabled", "disabled"); // Th√™m thu·ªôc t√≠nh disabled.
        }
    };

    // --- X·ª≠ l√Ω s·ª± ki·ªán click cho n√∫t "G·ª≠i b√†i ki·ªÉm tra" (b√™n ngo√†i modal) ---
    submitExamBtn.addEventListener("click", () => {
        // T·∫°o m·ªôt instance c·ªßa modal x√°c nh·∫≠n v√† hi·ªÉn th·ªã n√≥.
        const confirmModal = new bootstrap.Modal(
            document.getElementById("confirmSubmitModal")
        );
        confirmModal.show();
    });

    // --- X·ª≠ l√Ω s·ª± ki·ªán click cho n√∫t "G·ª≠i b√†i ki·ªÉm tra" (trong modal x√°c nh·∫≠n) ---
    finalSubmitBtn.addEventListener("click", () => {
        // L·∫•y instance c·ªßa modal x√°c nh·∫≠n.
        const confirmModalInstance = bootstrap.Modal.getInstance(
            document.getElementById("confirmSubmitModal")
        );
        if (confirmModalInstance) {
            confirmModalInstance.hide(); // ·∫®n modal x√°c nh·∫≠n.
        }

        let correctCount = 0; // Bi·∫øn ƒë·∫øm s·ªë c√¢u tr·∫£ l·ªùi ƒë√∫ng.
        let resultHtml = `<ul class="list-group list-group-flush">`; // B·∫Øt ƒë·∫ßu chu·ªói HTML cho k·∫øt qu·∫£.

        // Duy·ªát qua t·ª´ng c√¢u h·ªèi trong `quizData` ƒë·ªÉ ki·ªÉm tra v√† hi·ªÉn th·ªã k·∫øt qu·∫£.
        quizData.forEach((q, index) => {
            const userAnswer = answers[index]?.trim() || ""; // L·∫•y c√¢u tr·∫£ l·ªùi c·ªßa ng∆∞·ªùi d√πng.
            const correctAnswer = q.correct_answer_text?.trim() || ""; // L·∫•y ƒë√°p √°n ƒë√∫ng.
            // So s√°nh c√¢u tr·∫£ l·ªùi c·ªßa ng∆∞·ªùi d√πng v·ªõi ƒë√°p √°n ƒë√∫ng (kh√¥ng ph√¢n bi·ªát hoa th∆∞·ªùng).
            const isCorrect =
                userAnswer.toLowerCase() === correctAnswer.toLowerCase();

            if (isCorrect) correctCount++; // TƒÉng bi·∫øn ƒë·∫øm n·∫øu ƒë√∫ng.

            // T·∫°o c√¢u ƒë·∫ßy ƒë·ªß v·ªõi t·ª´ ƒë√£ ƒëi·ªÅn c·ªßa ng∆∞·ªùi d√πng, ƒë∆∞·ª£c g·∫°ch ch√¢n v√† t√¥ m√†u (xanh n·∫øu ƒë√∫ng, ƒë·ªè n·∫øu sai).
            let fullQuestionWithAnswer = q.question.replace(
                "___",
                `<span class="filled-answer-underline ${
                    isCorrect ? "text-success" : "text-danger"
                }">${userAnswer || "[Ch∆∞a tr·∫£ l·ªùi]"}</span>`
            );

            // T·∫°o c√¢u ƒë·∫ßy ƒë·ªß v·ªõi ƒë√°p √°n ƒë√∫ng, ƒë∆∞·ª£c g·∫°ch ch√¢n v√† t√¥ m√†u v√†ng.
            let fullQuestionWithCorrectAnswer = q.question.replace(
                "___",
                `<span class="filled-answer-underline text-warning">${correctAnswer}</span>`
            );

            // Th√™m HTML cho k·∫øt qu·∫£ c·ªßa t·ª´ng c√¢u h·ªèi v√†o chu·ªói `resultHtml`.
            resultHtml += `
                <li class="list-group-item bg-dark text-white border-secondary">
                    <p><strong>C√¢u ${index + 1}:</strong> ${
                q.display_question || q.question
            }</p>
                    <p>üîπ <strong>C√¢u tr·∫£ l·ªùi c·ªßa b·∫°n:</strong> ${fullQuestionWithAnswer}</p>
                    <p>‚úÖ <strong>ƒê√°p √°n ƒë√∫ng:</strong> ${fullQuestionWithCorrectAnswer}</p>
                    <hr class="text-secondary">
                </li>`;
        });

        // ƒê√≥ng th·∫ª ul v√† th√™m t·ªïng k·∫øt qu·∫£.
        resultHtml += `</ul>
            <div class="text-center mt-3">
                <h5 class="fw-bold text-success">üéâ B·∫°n ƒë√£ tr·∫£ l·ªùi ƒë√∫ng ${correctCount} / ${quizData.length} c√¢u</h5>
            </div>`;

        document.getElementById("resultBody").innerHTML = resultHtml;

        const resultModal = new bootstrap.Modal(
            document.getElementById("resultModal")
        );
        resultModal.show();
    });

    renderQuestion(currentIndex);
});
